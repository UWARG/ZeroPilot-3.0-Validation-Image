
ZP3-Validation-Image-Target.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c4c  08006c4c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00007c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c54  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  2000000c  08006c60  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000664  08006c60  00008664  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021018  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ef  00000000  00000000  0002905a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  0002d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001536  00000000  00000000  0002ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dac4  00000000  00000000  000304b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239b0  00000000  00000000  0005df7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118f1a  00000000  00000000  0008192a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007254  00000000  00000000  0019a888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001a1adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006b98 	.word	0x08006b98

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08006b98 	.word	0x08006b98

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000248:	f000 b97e 	b.w	8000548 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xa8>
 8000270:	428a      	cmp	r2, r1
 8000272:	460f      	mov	r7, r1
 8000274:	4684      	mov	ip, r0
 8000276:	4696      	mov	lr, r2
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	d960      	bls.n	8000340 <__udivmoddi4+0xdc>
 800027e:	b14b      	cbz	r3, 8000294 <__udivmoddi4+0x30>
 8000280:	fa02 fe03 	lsl.w	lr, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa00 fc03 	lsl.w	ip, r0, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000298:	fa1f f48e 	uxth.w	r4, lr
 800029c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002a0:	fbb7 f1f6 	udiv	r1, r7, r6
 80002a4:	fb06 7711 	mls	r7, r6, r1, r7
 80002a8:	fb01 f004 	mul.w	r0, r1, r4
 80002ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d908      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b4:	eb1e 0202 	adds.w	r2, lr, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x60>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f200 812d 	bhi.w	800051e <__udivmoddi4+0x2ba>
 80002c4:	4639      	mov	r1, r7
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fa1f fc8c 	uxth.w	ip, ip
 80002cc:	fbb2 f0f6 	udiv	r0, r2, r6
 80002d0:	fb06 2210 	mls	r2, r6, r0, r2
 80002d4:	fb00 f404 	mul.w	r4, r0, r4
 80002d8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002dc:	4564      	cmp	r4, ip
 80002de:	d908      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002e0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002e8:	d202      	bcs.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	4564      	cmp	r4, ip
 80002ec:	f200 811a 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 80002f0:	4610      	mov	r0, r2
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	ebac 0c04 	sub.w	ip, ip, r4
 80002fa:	2100      	movs	r1, #0
 80002fc:	b125      	cbz	r5, 8000308 <__udivmoddi4+0xa4>
 80002fe:	fa2c f303 	lsr.w	r3, ip, r3
 8000302:	2200      	movs	r2, #0
 8000304:	e9c5 3200 	strd	r3, r2, [r5]
 8000308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d905      	bls.n	800031c <__udivmoddi4+0xb8>
 8000310:	b10d      	cbz	r5, 8000316 <__udivmoddi4+0xb2>
 8000312:	e9c5 0100 	strd	r0, r1, [r5]
 8000316:	2100      	movs	r1, #0
 8000318:	4608      	mov	r0, r1
 800031a:	e7f5      	b.n	8000308 <__udivmoddi4+0xa4>
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d14d      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000324:	42a3      	cmp	r3, r4
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4290      	cmp	r0, r2
 800032c:	f080 80ef 	bcs.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4606      	mov	r6, r0
 8000332:	4623      	mov	r3, r4
 8000334:	4608      	mov	r0, r1
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e6      	beq.n	8000308 <__udivmoddi4+0xa4>
 800033a:	e9c5 6300 	strd	r6, r3, [r5]
 800033e:	e7e3      	b.n	8000308 <__udivmoddi4+0xa4>
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 80a2 	bne.w	800048a <__udivmoddi4+0x226>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800034c:	fa1f f68e 	uxth.w	r6, lr
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f4f7 	udiv	r4, r2, r7
 8000356:	fb07 2014 	mls	r0, r7, r4, r2
 800035a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb06 f004 	mul.w	r0, r6, r4
 8000366:	4290      	cmp	r0, r2
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1e 0202 	adds.w	r2, lr, r2
 800036e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4290      	cmp	r0, r2
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80c8 	beq.w	8000518 <__udivmoddi4+0x2b4>
 8000388:	4644      	mov	r4, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fa1f fc8c 	uxth.w	ip, ip
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	fb00 f606 	mul.w	r6, r0, r6
 800039c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003a0:	4566      	cmp	r6, ip
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003a4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x150>
 80003ae:	4566      	cmp	r6, ip
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c6>
 80003b4:	4610      	mov	r0, r2
 80003b6:	ebac 0c06 	sub.w	ip, ip, r6
 80003ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa04 fe01 	lsl.w	lr, r4, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d2:	40f4      	lsrs	r4, r6
 80003d4:	408a      	lsls	r2, r1
 80003d6:	431f      	orrs	r7, r3
 80003d8:	ea4e 030c 	orr.w	r3, lr, ip
 80003dc:	fa00 fe01 	lsl.w	lr, r0, r1
 80003e0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f0:	fb08 4410 	mls	r4, r8, r0, r4
 80003f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f8:	fb00 f90c 	mul.w	r9, r0, ip
 80003fc:	45a1      	cmp	r9, r4
 80003fe:	d90e      	bls.n	800041e <__udivmoddi4+0x1ba>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000406:	bf2c      	ite	cs
 8000408:	f04f 0b01 	movcs.w	fp, #1
 800040c:	f04f 0b00 	movcc.w	fp, #0
 8000410:	45a1      	cmp	r9, r4
 8000412:	d903      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000414:	f1bb 0f00 	cmp.w	fp, #0
 8000418:	f000 8093 	beq.w	8000542 <__udivmoddi4+0x2de>
 800041c:	4650      	mov	r0, sl
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f8 	udiv	r3, r4, r8
 800042a:	fb08 4413 	mls	r4, r8, r3, r4
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000436:	45a4      	cmp	ip, r4
 8000438:	d906      	bls.n	8000448 <__udivmoddi4+0x1e4>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000440:	d201      	bcs.n	8000446 <__udivmoddi4+0x1e2>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d87a      	bhi.n	800053c <__udivmoddi4+0x2d8>
 8000446:	4643      	mov	r3, r8
 8000448:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	fba0 9802 	umull	r9, r8, r0, r2
 8000454:	4544      	cmp	r4, r8
 8000456:	46cc      	mov	ip, r9
 8000458:	4643      	mov	r3, r8
 800045a:	d302      	bcc.n	8000462 <__udivmoddi4+0x1fe>
 800045c:	d106      	bne.n	800046c <__udivmoddi4+0x208>
 800045e:	45ce      	cmp	lr, r9
 8000460:	d204      	bcs.n	800046c <__udivmoddi4+0x208>
 8000462:	3801      	subs	r0, #1
 8000464:	ebb9 0c02 	subs.w	ip, r9, r2
 8000468:	eb68 0307 	sbc.w	r3, r8, r7
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x222>
 800046e:	ebbe 020c 	subs.w	r2, lr, ip
 8000472:	eb64 0403 	sbc.w	r4, r4, r3
 8000476:	fa04 f606 	lsl.w	r6, r4, r6
 800047a:	fa22 f301 	lsr.w	r3, r2, r1
 800047e:	40cc      	lsrs	r4, r1
 8000480:	431e      	orrs	r6, r3
 8000482:	e9c5 6400 	strd	r6, r4, [r5]
 8000486:	2100      	movs	r1, #0
 8000488:	e73e      	b.n	8000308 <__udivmoddi4+0xa4>
 800048a:	fa02 fe03 	lsl.w	lr, r2, r3
 800048e:	f1c3 0120 	rsb	r1, r3, #32
 8000492:	fa04 f203 	lsl.w	r2, r4, r3
 8000496:	fa00 fc03 	lsl.w	ip, r0, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004a0:	fa20 f101 	lsr.w	r1, r0, r1
 80004a4:	fa1f f68e 	uxth.w	r6, lr
 80004a8:	fbb4 f0f7 	udiv	r0, r4, r7
 80004ac:	430a      	orrs	r2, r1
 80004ae:	fb07 4410 	mls	r4, r7, r0, r4
 80004b2:	0c11      	lsrs	r1, r2, #16
 80004b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004b8:	fb00 f406 	mul.w	r4, r0, r6
 80004bc:	428c      	cmp	r4, r1
 80004be:	d90e      	bls.n	80004de <__udivmoddi4+0x27a>
 80004c0:	eb1e 0101 	adds.w	r1, lr, r1
 80004c4:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80004c8:	bf2c      	ite	cs
 80004ca:	f04f 0901 	movcs.w	r9, #1
 80004ce:	f04f 0900 	movcc.w	r9, #0
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d902      	bls.n	80004dc <__udivmoddi4+0x278>
 80004d6:	f1b9 0f00 	cmp.w	r9, #0
 80004da:	d02c      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004dc:	4640      	mov	r0, r8
 80004de:	1b09      	subs	r1, r1, r4
 80004e0:	b292      	uxth	r2, r2
 80004e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80004e6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ee:	fb04 f106 	mul.w	r1, r4, r6
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x2a2>
 80004f6:	eb1e 0202 	adds.w	r2, lr, r2
 80004fa:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80004fe:	d201      	bcs.n	8000504 <__udivmoddi4+0x2a0>
 8000500:	4291      	cmp	r1, r2
 8000502:	d815      	bhi.n	8000530 <__udivmoddi4+0x2cc>
 8000504:	4644      	mov	r4, r8
 8000506:	1a52      	subs	r2, r2, r1
 8000508:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800050c:	e721      	b.n	8000352 <__udivmoddi4+0xee>
 800050e:	1a86      	subs	r6, r0, r2
 8000510:	eb64 0303 	sbc.w	r3, r4, r3
 8000514:	2001      	movs	r0, #1
 8000516:	e70e      	b.n	8000336 <__udivmoddi4+0xd2>
 8000518:	3c02      	subs	r4, #2
 800051a:	4472      	add	r2, lr
 800051c:	e735      	b.n	800038a <__udivmoddi4+0x126>
 800051e:	3902      	subs	r1, #2
 8000520:	4472      	add	r2, lr
 8000522:	e6d0      	b.n	80002c6 <__udivmoddi4+0x62>
 8000524:	44f4      	add	ip, lr
 8000526:	3802      	subs	r0, #2
 8000528:	e6e3      	b.n	80002f2 <__udivmoddi4+0x8e>
 800052a:	44f4      	add	ip, lr
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x152>
 8000530:	3c02      	subs	r4, #2
 8000532:	4472      	add	r2, lr
 8000534:	e7e7      	b.n	8000506 <__udivmoddi4+0x2a2>
 8000536:	3802      	subs	r0, #2
 8000538:	4471      	add	r1, lr
 800053a:	e7d0      	b.n	80004de <__udivmoddi4+0x27a>
 800053c:	3b02      	subs	r3, #2
 800053e:	443c      	add	r4, r7
 8000540:	e782      	b.n	8000448 <__udivmoddi4+0x1e4>
 8000542:	3802      	subs	r0, #2
 8000544:	443c      	add	r4, r7
 8000546:	e76a      	b.n	800041e <__udivmoddi4+0x1ba>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_DMA_Init+0x50>)
 8000554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000556:	4a11      	ldr	r2, [pc, #68]	@ (800059c <MX_DMA_Init+0x50>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	6493      	str	r3, [r2, #72]	@ 0x48
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_DMA_Init+0x50>)
 8000560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_DMA_Init+0x50>)
 800056c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056e:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <MX_DMA_Init+0x50>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6493      	str	r3, [r2, #72]	@ 0x48
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_DMA_Init+0x50>)
 8000578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	201d      	movs	r0, #29
 8000588:	f001 fc8f 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800058c:	201d      	movs	r0, #29
 800058e:	f001 fca6 	bl	8001ede <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_GPIO_Init>:
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
     PB8   ------> S_TIM16_CH1
     PB9   ------> S_TIM17_CH1
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4ba6      	ldr	r3, [pc, #664]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4aa5      	ldr	r2, [pc, #660]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4ba3      	ldr	r3, [pc, #652]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0310 	and.w	r3, r3, #16
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4ba0      	ldr	r3, [pc, #640]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a9f      	ldr	r2, [pc, #636]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b9d      	ldr	r3, [pc, #628]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b9a      	ldr	r3, [pc, #616]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a99      	ldr	r2, [pc, #612]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b97      	ldr	r3, [pc, #604]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b94      	ldr	r3, [pc, #592]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a93      	ldr	r2, [pc, #588]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b91      	ldr	r3, [pc, #580]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b8e      	ldr	r3, [pc, #568]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a8d      	ldr	r2, [pc, #564]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4b8b      	ldr	r3, [pc, #556]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800062e:	4b88      	ldr	r3, [pc, #544]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a87      	ldr	r2, [pc, #540]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b85      	ldr	r3, [pc, #532]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	4b82      	ldr	r3, [pc, #520]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a81      	ldr	r2, [pc, #516]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b7f      	ldr	r3, [pc, #508]	@ (8000850 <MX_GPIO_Init+0x2b0>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0308 	and.w	r3, r3, #8
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800065e:	f002 fa21 	bl	8002aa4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_1_GPIO_Port, GPIO_1_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2104      	movs	r1, #4
 8000666:	487b      	ldr	r0, [pc, #492]	@ (8000854 <MX_GPIO_Init+0x2b4>)
 8000668:	f002 f868 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_2_Pin|GPIO_3_Pin|GPIO_4_Pin|GPIO_5_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000672:	4879      	ldr	r0, [pc, #484]	@ (8000858 <MX_GPIO_Init+0x2b8>)
 8000674:	f002 f862 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_LED_1_Pin|GPIO_LED_2_Pin|GPIO_LED_3_Pin|GPIO_LED_4_Pin
 8000678:	2200      	movs	r2, #0
 800067a:	213f      	movs	r1, #63	@ 0x3f
 800067c:	4877      	ldr	r0, [pc, #476]	@ (800085c <MX_GPIO_Init+0x2bc>)
 800067e:	f002 f85d 	bl	800273c <HAL_GPIO_WritePin>
                          |GPIO_LED_5_Pin|GPIO_LED_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_6_Pin|GPIO_7_Pin|GPIO_8_Pin|GPIO_9_Pin
 8000682:	2200      	movs	r2, #0
 8000684:	21f8      	movs	r1, #248	@ 0xf8
 8000686:	4876      	ldr	r0, [pc, #472]	@ (8000860 <MX_GPIO_Init+0x2c0>)
 8000688:	f002 f858 	bl	800273c <HAL_GPIO_WritePin>
                          |GPIO_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800068c:	2378      	movs	r3, #120	@ 0x78
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800069c:	2302      	movs	r3, #2
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	486f      	ldr	r0, [pc, #444]	@ (8000864 <MX_GPIO_Init+0x2c4>)
 80006a8:	f001 fec8 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	4869      	ldr	r0, [pc, #420]	@ (8000868 <MX_GPIO_Init+0x2c8>)
 80006c4:	f001 feba 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GPIO_IL_D_Pin|GPIO_IL_C_Pin|uSD_Detect_Pin;
 80006c8:	f640 030c 	movw	r3, #2060	@ 0x80c
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	485e      	ldr	r0, [pc, #376]	@ (8000858 <MX_GPIO_Init+0x2b8>)
 80006de:	f001 fead 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006e2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80006f4:	2302      	movs	r3, #2
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4856      	ldr	r0, [pc, #344]	@ (8000858 <MX_GPIO_Init+0x2b8>)
 8000700:	f001 fe9c 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBAT_B_SENSE_Pin;
 8000704:	2304      	movs	r3, #4
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000708:	2303      	movs	r3, #3
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBAT_B_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4854      	ldr	r0, [pc, #336]	@ (8000868 <MX_GPIO_Init+0x2c8>)
 8000718:	f001 fe90 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA7 */
  GPIO_InitStruct.Pin = PWR_SENSE_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800071c:	23d0      	movs	r3, #208	@ 0xd0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	484f      	ldr	r0, [pc, #316]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000730:	f001 fe84 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|VBAT_A_SENSE_Pin;
 8000734:	2303      	movs	r3, #3
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4843      	ldr	r0, [pc, #268]	@ (8000854 <MX_GPIO_Init+0x2b4>)
 8000748:	f001 fe78 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_1_Pin;
 800074c:	2304      	movs	r3, #4
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	483c      	ldr	r0, [pc, #240]	@ (8000854 <MX_GPIO_Init+0x2b4>)
 8000764:	f001 fe6a 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_3_Pin|GPIO_4_Pin|GPIO_5_Pin;
 8000768:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4835      	ldr	r0, [pc, #212]	@ (8000858 <MX_GPIO_Init+0x2b8>)
 8000782:	f001 fe5b 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO_LED_1_Pin|GPIO_LED_2_Pin|GPIO_LED_3_Pin|GPIO_LED_4_Pin
 8000786:	233f      	movs	r3, #63	@ 0x3f
 8000788:	61fb      	str	r3, [r7, #28]
                          |GPIO_LED_5_Pin|GPIO_LED_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	482f      	ldr	r0, [pc, #188]	@ (800085c <MX_GPIO_Init+0x2bc>)
 800079e:	f001 fe4d 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80007a2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007b4:	2302      	movs	r3, #2
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4828      	ldr	r0, [pc, #160]	@ (8000860 <MX_GPIO_Init+0x2c0>)
 80007c0:	f001 fe3c 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO_IL_B_Pin|GPIO_IL_A_Pin;
 80007c4:	23c0      	movs	r3, #192	@ 0xc0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4821      	ldr	r0, [pc, #132]	@ (800085c <MX_GPIO_Init+0x2bc>)
 80007d8:	f001 fe30 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_6_Pin|GPIO_7_Pin|GPIO_8_Pin|GPIO_9_Pin
 80007dc:	23f8      	movs	r3, #248	@ 0xf8
 80007de:	61fb      	str	r3, [r7, #28]
                          |GPIO_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	481b      	ldr	r0, [pc, #108]	@ (8000860 <MX_GPIO_Init+0x2c0>)
 80007f4:	f001 fe22 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800080a:	230e      	movs	r3, #14
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	480f      	ldr	r0, [pc, #60]	@ (8000854 <MX_GPIO_Init+0x2b4>)
 8000816:	f001 fe11 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800081a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800082c:	230e      	movs	r3, #14
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	@ (8000854 <MX_GPIO_Init+0x2b4>)
 8000838:	f001 fe00 	bl	800243c <HAL_GPIO_Init>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_13, EXTI_LINE_PRIV);
 800083c:	f240 2102 	movw	r1, #514	@ 0x202
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <MX_GPIO_Init+0x2d0>)
 8000842:	f001 fdbd 	bl	80023c0 <HAL_EXTI_ConfigLineAttributes>

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	42020400 	.word	0x42020400
 8000858:	42021400 	.word	0x42021400
 800085c:	42021800 	.word	0x42021800
 8000860:	42020c00 	.word	0x42020c00
 8000864:	42021000 	.word	0x42021000
 8000868:	42020800 	.word	0x42020800
 800086c:	42020000 	.word	0x42020000
 8000870:	0600000d 	.word	0x0600000d

08000874 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_I2C1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <MX_I2C1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_I2C1_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <MX_I2C1_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_I2C1_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <MX_I2C1_Init+0x74>)
 80008b0:	f001 ff5c 	bl	800276c <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f000 faa1 	bl	8000e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_I2C1_Init+0x74>)
 80008c2:	f001 ffee 	bl	80028a2 <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 fa98 	bl	8000e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_I2C1_Init+0x74>)
 80008d4:	f002 f830 	bl	8002938 <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 fa8f 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000028 	.word	0x20000028
 80008ec:	40005400 	.word	0x40005400
 80008f0:	10909cec 	.word	0x10909cec

080008f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_I2C2_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_I2C2_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <MX_I2C2_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_I2C2_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000930:	f001 ff1c 	bl	800276c <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fa61 	bl	8000e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000942:	f001 ffae 	bl	80028a2 <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fa58 	bl	8000e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000954:	f001 fff0 	bl	8002938 <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fa4f 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000007c 	.word	0x2000007c
 800096c:	40005800 	.word	0x40005800
 8000970:	10909cec 	.word	0x10909cec

08000974 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_I2C3_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_I2C3_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <MX_I2C3_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <MX_I2C3_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <MX_I2C3_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_I2C3_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_I2C3_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_I2C3_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_I2C3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_I2C3_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <MX_I2C3_Init+0x74>)
 80009b0:	f001 fedc 	bl	800276c <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fa21 	bl	8000e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <MX_I2C3_Init+0x74>)
 80009c2:	f001 ff6e 	bl	80028a2 <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 fa18 	bl	8000e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_I2C3_Init+0x74>)
 80009d4:	f001 ffb0 	bl	8002938 <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fa0f 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000d0 	.word	0x200000d0
 80009ec:	40005c00 	.word	0x40005c00
 80009f0:	10909cec 	.word	0x10909cec

080009f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0b2      	sub	sp, #200	@ 0xc8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	2294      	movs	r2, #148	@ 0x94
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f006 f892 	bl	8006b3e <memset>
  if(i2cHandle->Instance==I2C1)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a64      	ldr	r2, [pc, #400]	@ (8000bb0 <HAL_I2C_MspInit+0x1bc>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d13e      	bne.n	8000aa2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a24:	2340      	movs	r3, #64	@ 0x40
 8000a26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 f831 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a3c:	f000 f9e0 	bl	8000e00 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a5b      	ldr	r2, [pc, #364]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4c:	4b59      	ldr	r3, [pc, #356]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8000a58:	f002 f824 	bl	8002aa4 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a5c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a76:	2304      	movs	r3, #4
 8000a78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000a80:	4619      	mov	r1, r3
 8000a82:	484d      	ldr	r0, [pc, #308]	@ (8000bb8 <HAL_I2C_MspInit+0x1c4>)
 8000a84:	f001 fcda 	bl	800243c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a88:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8c:	4a49      	ldr	r2, [pc, #292]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000a8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a94:	4b47      	ldr	r3, [pc, #284]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000aa0:	e081      	b.n	8000ba6 <HAL_I2C_MspInit+0x1b2>
  else if(i2cHandle->Instance==I2C2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a45      	ldr	r2, [pc, #276]	@ (8000bbc <HAL_I2C_MspInit+0x1c8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d13b      	bne.n	8000b24 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 ffed 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8000ac4:	f000 f99c 	bl	8000e00 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a39      	ldr	r2, [pc, #228]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000ace:	f043 0320 	orr.w	r3, r3, #32
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae6:	2312      	movs	r3, #18
 8000ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af8:	2304      	movs	r3, #4
 8000afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000b02:	4619      	mov	r1, r3
 8000b04:	482e      	ldr	r0, [pc, #184]	@ (8000bc0 <HAL_I2C_MspInit+0x1cc>)
 8000b06:	f001 fc99 	bl	800243c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0e:	4a29      	ldr	r2, [pc, #164]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
}
 8000b22:	e040      	b.n	8000ba6 <HAL_I2C_MspInit+0x1b2>
  else if(i2cHandle->Instance==I2C3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a26      	ldr	r2, [pc, #152]	@ (8000bc4 <HAL_I2C_MspInit+0x1d0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13b      	bne.n	8000ba6 <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 ffab 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_I2C_MspInit+0x158>
      Error_Handler();
 8000b48:	f000 f95a 	bl	8000e00 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b50:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000b86:	4619      	mov	r1, r3
 8000b88:	480f      	ldr	r0, [pc, #60]	@ (8000bc8 <HAL_I2C_MspInit+0x1d4>)
 8000b8a:	f001 fc57 	bl	800243c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_I2C_MspInit+0x1c0>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
}
 8000ba6:	bf00      	nop
 8000ba8:	37c8      	adds	r7, #200	@ 0xc8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	42021800 	.word	0x42021800
 8000bbc:	40005800 	.word	0x40005800
 8000bc0:	42021400 	.word	0x42021400
 8000bc4:	40005c00 	.word	0x40005c00
 8000bc8:	42020800 	.word	0x42020800

08000bcc <main>:

  * @retval int

  */

int main(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000bd0:	f001 f819 	bl	8001c06 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 8000bd4:	f000 f83a 	bl	8000c4c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000bd8:	f7ff fce2 	bl	80005a0 <MX_GPIO_Init>

  MX_DMA_Init();
 8000bdc:	f7ff fcb6 	bl	800054c <MX_DMA_Init>

  MX_USART2_UART_Init();
 8000be0:	f000 fd96 	bl	8001710 <MX_USART2_UART_Init>

  MX_USART3_UART_Init();
 8000be4:	f000 fde0 	bl	80017a8 <MX_USART3_UART_Init>

  MX_SDMMC1_SD_Init();
 8000be8:	f000 f910 	bl	8000e0c <MX_SDMMC1_SD_Init>

  if (MX_FATFS_Init() != APP_OK) {
 8000bec:	f005 fed8 	bl	80069a0 <MX_FATFS_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <main+0x2e>

    Error_Handler();
 8000bf6:	f000 f903 	bl	8000e00 <Error_Handler>

  }

  MX_I2C1_Init();
 8000bfa:	f7ff fe3b 	bl	8000874 <MX_I2C1_Init>

  MX_I2C2_Init();
 8000bfe:	f7ff fe79 	bl	80008f4 <MX_I2C2_Init>

  MX_I2C3_Init();
 8000c02:	f7ff feb7 	bl	8000974 <MX_I2C3_Init>

  MX_SPI1_Init();
 8000c06:	f000 f91f 	bl	8000e48 <MX_SPI1_Init>

  MX_SPI2_Init();
 8000c0a:	f000 f95b 	bl	8000ec4 <MX_SPI2_Init>

  MX_TIM1_Init();
 8000c0e:	f000 fb53 	bl	80012b8 <MX_TIM1_Init>

  MX_TIM3_Init();
 8000c12:	f000 f883 	bl	8000d1c <MX_TIM3_Init>

  MX_USART1_UART_Init();
 8000c16:	f000 fd2f 	bl	8001678 <MX_USART1_UART_Init>

  MX_LPUART1_UART_Init();
 8000c1a:	f000 fc93 	bl	8001544 <MX_LPUART1_UART_Init>

  MX_UART4_Init();
 8000c1e:	f000 fcdf 	bl	80015e0 <MX_UART4_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <main+0x7c>)
 8000c26:	f003 ffe3 	bl	8004bf0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <main+0x7c>)
 8000c2e:	f003 ffdf 	bl	8004bf0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c32:	2108      	movs	r1, #8
 8000c34:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <main+0x7c>)
 8000c36:	f003 ffdb 	bl	8004bf0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000c3a:	210c      	movs	r1, #12
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <main+0x7c>)
 8000c3e:	f003 ffd7 	bl	8004bf0 <HAL_TIM_PWM_Start>

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */

  while (1)
 8000c42:	bf00      	nop
 8000c44:	e7fd      	b.n	8000c42 <main+0x76>
 8000c46:	bf00      	nop
 8000c48:	20000124 	.word	0x20000124

08000c4c <SystemClock_Config>:
  * @retval None

  */

void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b098      	sub	sp, #96	@ 0x60
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	2248      	movs	r2, #72	@ 0x48
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 ff6f 	bl	8006b3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

  // Configure the main internal regulator output voltage
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c72:	f001 febb 	bl	80029ec <HAL_PWREx_ControlVoltageScaling>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c7c:	f000 f8c0 	bl	8000e00 <Error_Handler>
  }

  // Initializes the RCC Oscillators according to the specified parameters
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1; // Division factor for PLL input clock (HSE / PLLM)
 8000c92:	2301      	movs	r3, #1
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 72; // Multiplication factor for PLL VCO (VCO = HSE * PLLN)
 8000c96:	2348      	movs	r3, #72	@ 0x48
 8000c98:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2; // Division factor for main system clock (VCO / PLLP)
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2; // Division factor for USB clock (48 MHz)
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2; // Division factor for other clock sources
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 ff3e 	bl	8002b2c <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 f8a3 	bl	8000e00 <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000cba:	230f      	movs	r3, #15
 8000cbc:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fbff 	bl	80034d8 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ce0:	f000 f88e 	bl	8000e00 <Error_Handler>
  }

  // Configure the Systick interrupt time
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ce4:	f002 fdcc 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <SystemClock_Config+0xcc>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	099b      	lsrs	r3, r3, #6
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f901 	bl	8001efa <HAL_SYSTICK_Config>

  // Configure the Systick
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000cf8:	2004      	movs	r0, #4
 8000cfa:	f001 f90b 	bl	8001f14 <HAL_SYSTICK_CLKSourceConfig>

  // SysTick_IRQn interrupt configuration
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d06:	f001 f8d0 	bl	8001eaa <HAL_NVIC_SetPriority>

  /** Enable MSI Auto calibration

  */

  HAL_RCCEx_EnableMSIPLLMode();
 8000d0a:	f003 fa49 	bl	80041a0 <HAL_RCCEx_EnableMSIPLLMode>

}
 8000d0e:	bf00      	nop
 8000d10:	3760      	adds	r7, #96	@ 0x60
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	10624dd3 	.word	0x10624dd3

08000d1c <MX_TIM3_Init>:
}
*/


void MX_TIM3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	619a      	str	r2, [r3, #24]

  // Enable timer clock
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000d34:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <MX_TIM3_Init+0xd8>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d38:	4a2e      	ldr	r2, [pc, #184]	@ (8000df4 <MX_TIM3_Init+0xd8>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <MX_TIM3_Init+0xd8>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  // Basic timer configuration
  htim3.Instance = TIM3;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <MX_TIM3_Init+0xe0>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d52:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999; // Adjust based on desired frequency
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d72:	4821      	ldr	r0, [pc, #132]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d74:	f003 fee5 	bl	8004b42 <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x66>
  {
    // Initialization Error
    Error_Handler();
 8000d7e:	f000 f83f 	bl	8000e00 <Error_Handler>
  }

  // PWM mode configuration
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d82:	2360      	movs	r3, #96	@ 0x60
 8000d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500; // Initial duty cycle value (between 0 and Period value)
 8000d86:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  // Configure PWM Channel 1
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4817      	ldr	r0, [pc, #92]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000d9c:	f004 f82e 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM3_Init+0x8e>
  {
    // Configuration Error
    Error_Handler();
 8000da6:	f000 f82b 	bl	8000e00 <Error_Handler>
  }

  // Configure PWM Channel 2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2204      	movs	r2, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000db2:	f004 f823 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0xa4>
  {
    // Configuration Error
    Error_Handler();
 8000dbc:	f000 f820 	bl	8000e00 <Error_Handler>
  }

  // Configure PWM Channel 3
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000dc8:	f004 f818 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0xba>
  {
    // Configuration Error
    Error_Handler();
 8000dd2:	f000 f815 	bl	8000e00 <Error_Handler>
  }

  // Configure PWM Channel 4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	220c      	movs	r2, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <MX_TIM3_Init+0xdc>)
 8000dde:	f004 f80d 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0xd0>
  {
    // Configuration Error
    Error_Handler();
 8000de8:	f000 f80a 	bl	8000e00 <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000
 8000df8:	20000124 	.word	0x20000124
 8000dfc:	40000400 	.word	0x40000400

08000e00 <Error_Handler>:

  */

void Error_Handler(void)

{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_SDMMC1_SD_Init+0x34>)
 8000e12:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <MX_SDMMC1_SD_Init+0x38>)
 8000e14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <MX_SDMMC1_SD_Init+0x34>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <MX_SDMMC1_SD_Init+0x34>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <MX_SDMMC1_SD_Init+0x34>)
 8000e24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e28:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <MX_SDMMC1_SD_Init+0x34>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <MX_SDMMC1_SD_Init+0x34>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20000170 	.word	0x20000170
 8000e44:	420c8000 	.word	0x420c8000

08000e48 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <MX_SPI1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e62:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e76:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_SPI1_Init+0x74>)
 8000ea8:	f003 fda8 	bl	80049fc <HAL_SPI_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f7ff ffa5 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001ec 	.word	0x200001ec
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <MX_SPI2_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000ede:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ee2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000ef2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ef6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_SPI2_Init+0x74>)
 8000f24:	f003 fd6a 	bl	80049fc <HAL_SPI_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f7ff ff67 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000250 	.word	0x20000250
 8000f3c:	40003800 	.word	0x40003800

08000f40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	@ 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d129      	bne.n	8000fb6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f62:	4b3d      	ldr	r3, [pc, #244]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	4a3c      	ldr	r2, [pc, #240]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000f68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	4a36      	ldr	r2, [pc, #216]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f92:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	482b      	ldr	r0, [pc, #172]	@ (800105c <HAL_SPI_MspInit+0x11c>)
 8000fb0:	f001 fa44 	bl	800243c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fb4:	e049      	b.n	800104a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <HAL_SPI_MspInit+0x120>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d144      	bne.n	800104a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc4:	4a24      	ldr	r2, [pc, #144]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff4:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001008:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800101a:	2305      	movs	r3, #5
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	480f      	ldr	r0, [pc, #60]	@ (8001064 <HAL_SPI_MspInit+0x124>)
 8001026:	f001 fa09 	bl	800243c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102a:	2303      	movs	r3, #3
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103a:	2305      	movs	r3, #5
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <HAL_SPI_MspInit+0x128>)
 8001046:	f001 f9f9 	bl	800243c <HAL_GPIO_Init>
}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	@ 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40013000 	.word	0x40013000
 8001058:	40021000 	.word	0x40021000
 800105c:	42021000 	.word	0x42021000
 8001060:	40003800 	.word	0x40003800
 8001064:	42020400 	.word	0x42020400
 8001068:	42020c00 	.word	0x42020c00

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_MspInit+0x44>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <HAL_MspInit+0x44>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6613      	str	r3, [r2, #96]	@ 0x60
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <HAL_MspInit+0x44>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x44>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	6593      	str	r3, [r2, #88]	@ 0x58
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010a2:	f001 fd0f 	bl	8002ac4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 fdd3 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <DMA1_Channel1_IRQHandler+0x10>)
 800111a:	f000 ffbf 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000300 	.word	0x20000300

08001128 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <SDMMC1_IRQHandler+0x10>)
 800112e:	f003 f9d9 	bl	80044e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000170 	.word	0x20000170

0800113c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001166:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001172:	4b4c      	ldr	r3, [pc, #304]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 8001174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e005      	b.n	800118e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001182:	4b48      	ldr	r3, [pc, #288]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800118e:	4a46      	ldr	r2, [pc, #280]	@ (80012a8 <SystemCoreClockUpdate+0x148>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001198:	4b42      	ldr	r3, [pc, #264]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d866      	bhi.n	8001272 <SystemCoreClockUpdate+0x112>
 80011a4:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <SystemCoreClockUpdate+0x4c>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011e1 	.word	0x080011e1
 80011b0:	08001273 	.word	0x08001273
 80011b4:	08001273 	.word	0x08001273
 80011b8:	08001273 	.word	0x08001273
 80011bc:	080011e9 	.word	0x080011e9
 80011c0:	08001273 	.word	0x08001273
 80011c4:	08001273 	.word	0x08001273
 80011c8:	08001273 	.word	0x08001273
 80011cc:	080011f1 	.word	0x080011f1
 80011d0:	08001273 	.word	0x08001273
 80011d4:	08001273 	.word	0x08001273
 80011d8:	08001273 	.word	0x08001273
 80011dc:	080011f9 	.word	0x080011f9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80011e0:	4a32      	ldr	r2, [pc, #200]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	6013      	str	r3, [r2, #0]
      break;
 80011e6:	e048      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80011e8:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 80011ea:	4a31      	ldr	r2, [pc, #196]	@ (80012b0 <SystemCoreClockUpdate+0x150>)
 80011ec:	601a      	str	r2, [r3, #0]
      break;
 80011ee:	e044      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 80011f2:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <SystemCoreClockUpdate+0x150>)
 80011f4:	601a      	str	r2, [r3, #0]
      break;
 80011f6:	e040      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80011f8:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	3301      	adds	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <SystemCoreClockUpdate+0xbe>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d006      	beq.n	800122a <SystemCoreClockUpdate+0xca>
 800121c:	e00b      	b.n	8001236 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800121e:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <SystemCoreClockUpdate+0x150>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	613b      	str	r3, [r7, #16]
          break;
 8001228:	e00b      	b.n	8001242 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800122a:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <SystemCoreClockUpdate+0x150>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	613b      	str	r3, [r7, #16]
          break;
 8001234:	e005      	b.n	8001242 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	613b      	str	r3, [r7, #16]
          break;
 8001240:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0e5b      	lsrs	r3, r3, #25
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	3301      	adds	r3, #1
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 800126e:	6013      	str	r3, [r2, #0]
      break;
 8001270:	e003      	b.n	800127a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001272:	4a0e      	ldr	r2, [pc, #56]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	6013      	str	r3, [r2, #0]
      break;
 8001278:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <SystemCoreClockUpdate+0x144>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <SystemCoreClockUpdate+0x154>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemCoreClockUpdate+0x14c>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08006bc8 	.word	0x08006bc8
 80012ac:	20000000 	.word	0x20000000
 80012b0:	00f42400 	.word	0x00f42400
 80012b4:	08006bb0 	.word	0x08006bb0

080012b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b098      	sub	sp, #96	@ 0x60
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2234      	movs	r2, #52	@ 0x34
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 fc2a 	bl	8006b3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ea:	4b3a      	ldr	r3, [pc, #232]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 80012ec:	4a3a      	ldr	r2, [pc, #232]	@ (80013d8 <MX_TIM1_Init+0x120>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012f0:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b37      	ldr	r3, [pc, #220]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80012fc:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 80012fe:	2263      	movs	r2, #99	@ 0x63
 8001300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001314:	482f      	ldr	r0, [pc, #188]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 8001316:	f003 fc14 	bl	8004b42 <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001320:	f7ff fd6e 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001330:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001334:	4619      	mov	r1, r3
 8001336:	4827      	ldr	r0, [pc, #156]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 8001338:	f004 fa16 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001342:	f7ff fd5d 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2360      	movs	r3, #96	@ 0x60
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001362:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	481a      	ldr	r0, [pc, #104]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 800136c:	f003 fd46 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001376:	f7ff fd43 	bl	8000e00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 80013b8:	f004 fa5e 	bl	8005878 <HAL_TIMEx_ConfigBreakDeadTime>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80013c2:	f7ff fd1d 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013c6:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_TIM1_Init+0x11c>)
 80013c8:	f000 f884 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3760      	adds	r7, #96	@ 0x60
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200002b4 	.word	0x200002b4
 80013d8:	40012c00 	.word	0x40012c00

080013dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a31      	ldr	r2, [pc, #196]	@ (80014c0 <HAL_TIM_PWM_MspInit+0xe4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d15c      	bne.n	80014b8 <HAL_TIM_PWM_MspInit+0xdc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <HAL_TIM_PWM_MspInit+0xe8>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <HAL_TIM_PWM_MspInit+0xe8>)
 8001404:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001408:	6613      	str	r3, [r2, #96]	@ 0x60
 800140a:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <HAL_TIM_PWM_MspInit+0xe8>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001416:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <HAL_TIM_PWM_MspInit+0xe8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a2a      	ldr	r2, [pc, #168]	@ (80014c4 <HAL_TIM_PWM_MspInit+0xe8>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <HAL_TIM_PWM_MspInit+0xe8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800142e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	481f      	ldr	r0, [pc, #124]	@ (80014c8 <HAL_TIM_PWM_MspInit+0xec>)
 800144c:	f000 fff6 	bl	800243c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001452:	4a1f      	ldr	r2, [pc, #124]	@ (80014d0 <HAL_TIM_PWM_MspInit+0xf4>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001458:	222a      	movs	r2, #42	@ 0x2a
 800145a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 800145e:	2210      	movs	r2, #16
 8001460:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 800146a:	2280      	movs	r2, #128	@ 0x80
 800146c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001474:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800147c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800148a:	4810      	ldr	r0, [pc, #64]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 800148c:	f000 fd5e 	bl	8001f4c <HAL_DMA_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_TIM_PWM_MspInit+0xbe>
    {
      Error_Handler();
 8001496:	f7ff fcb3 	bl	8000e00 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_tim1_ch1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800149a:	2110      	movs	r1, #16
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 800149e:	f000 fefd 	bl	800229c <HAL_DMA_ConfigChannelAttributes>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80014a8:	f7ff fcaa 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80014b2:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_TIM_PWM_MspInit+0xf0>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	42021000 	.word	0x42021000
 80014cc:	20000300 	.word	0x20000300
 80014d0:	40020008 	.word	0x40020008

080014d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a11      	ldr	r2, [pc, #68]	@ (8001538 <HAL_TIM_MspPostInit+0x64>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d11c      	bne.n	8001530 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_TIM_MspPostInit+0x68>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <HAL_TIM_MspPostInit+0x68>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_TIM_MspPostInit+0x68>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800150e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <HAL_TIM_MspPostInit+0x6c>)
 800152c:	f000 ff86 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40012c00 	.word	0x40012c00
 800153c:	40021000 	.word	0x40021000
 8001540:	42021000 	.word	0x42021000

08001544 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 800154a:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <MX_LPUART1_UART_Init+0x94>)
 800154c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001550:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <MX_LPUART1_UART_Init+0x98>)
 8001552:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001568:	220c      	movs	r2, #12
 800156a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800158a:	4812      	ldr	r0, [pc, #72]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 800158c:	f004 fa00 	bl	8005990 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001596:	f7ff fc33 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159a:	2100      	movs	r1, #0
 800159c:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 800159e:	f004 ff9f 	bl	80064e0 <HAL_UARTEx_SetTxFifoThreshold>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80015a8:	f7ff fc2a 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 80015b0:	f004 ffd4 	bl	800655c <HAL_UARTEx_SetRxFifoThreshold>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80015ba:	f7ff fc21 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_LPUART1_UART_Init+0x90>)
 80015c0:	f004 ff55 	bl	800646e <HAL_UARTEx_DisableFifoMode>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80015ca:	f7ff fc19 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000368 	.word	0x20000368
 80015d8:	40008000 	.word	0x40008000
 80015dc:	00033324 	.word	0x00033324

080015e0 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <MX_UART4_Init+0x90>)
 80015e6:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <MX_UART4_Init+0x94>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_UART4_Init+0x90>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_UART4_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <MX_UART4_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_UART4_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_UART4_Init+0x90>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_UART4_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_UART4_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_UART4_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_UART4_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_UART4_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001628:	4811      	ldr	r0, [pc, #68]	@ (8001670 <MX_UART4_Init+0x90>)
 800162a:	f004 f9b1 	bl	8005990 <HAL_UART_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001634:	f7ff fbe4 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_UART4_Init+0x90>)
 800163c:	f004 ff50 	bl	80064e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001646:	f7ff fbdb 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_UART4_Init+0x90>)
 800164e:	f004 ff85 	bl	800655c <HAL_UARTEx_SetRxFifoThreshold>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001658:	f7ff fbd2 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_UART4_Init+0x90>)
 800165e:	f004 ff06 	bl	800646e <HAL_UARTEx_DisableFifoMode>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001668:	f7ff fbca 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200003fc 	.word	0x200003fc
 8001674:	40004c00 	.word	0x40004c00

08001678 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <MX_USART1_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016c2:	f004 f965 	bl	8005990 <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f7ff fb98 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016d4:	f004 ff04 	bl	80064e0 <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f7ff fb8f 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016e6:	f004 ff39 	bl	800655c <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f7ff fb86 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016f6:	f004 feba 	bl	800646e <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f7ff fb7e 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000490 	.word	0x20000490
 800170c:	40013800 	.word	0x40013800

08001710 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <MX_USART2_UART_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800175a:	f004 f919 	bl	8005990 <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001764:	f7ff fb4c 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800176c:	f004 feb8 	bl	80064e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001776:	f7ff fb43 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800177e:	f004 feed 	bl	800655c <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001788:	f7ff fb3a 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800178e:	f004 fe6e 	bl	800646e <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001798:	f7ff fb32 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000524 	.word	0x20000524
 80017a4:	40004400 	.word	0x40004400

080017a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <MX_USART3_UART_Init+0x94>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f0:	4811      	ldr	r0, [pc, #68]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017f2:	f004 f8cd 	bl	8005990 <HAL_UART_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017fc:	f7ff fb00 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	480d      	ldr	r0, [pc, #52]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 8001804:	f004 fe6c 	bl	80064e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800180e:	f7ff faf7 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 8001816:	f004 fea1 	bl	800655c <HAL_UARTEx_SetRxFifoThreshold>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001820:	f7ff faee 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 8001826:	f004 fe22 	bl	800646e <HAL_UARTEx_DisableFifoMode>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001830:	f7ff fae6 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200005b8 	.word	0x200005b8
 800183c:	40004800 	.word	0x40004800

08001840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0b8      	sub	sp, #224	@ 0xe0
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001858:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800185c:	2294      	movs	r2, #148	@ 0x94
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f005 f96c 	bl	8006b3e <memset>
  if(uartHandle->Instance==LPUART1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4aa4      	ldr	r2, [pc, #656]	@ (8001afc <HAL_UART_MspInit+0x2bc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d13d      	bne.n	80018ec <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001870:	2320      	movs	r3, #32
 8001872:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800187e:	4618      	mov	r0, r3
 8001880:	f002 f90a 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800188a:	f7ff fab9 	bl	8000e00 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800188e:	4b9c      	ldr	r3, [pc, #624]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001892:	4a9b      	ldr	r2, [pc, #620]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800189a:	4b99      	ldr	r3, [pc, #612]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 800189c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b96      	ldr	r3, [pc, #600]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a95      	ldr	r2, [pc, #596]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b93      	ldr	r3, [pc, #588]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80018bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80018d8:	2308      	movs	r3, #8
 80018da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018e2:	4619      	mov	r1, r3
 80018e4:	4887      	ldr	r0, [pc, #540]	@ (8001b04 <HAL_UART_MspInit+0x2c4>)
 80018e6:	f000 fda9 	bl	800243c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018ea:	e158      	b.n	8001b9e <HAL_UART_MspInit+0x35e>
  else if(uartHandle->Instance==UART4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a85      	ldr	r2, [pc, #532]	@ (8001b08 <HAL_UART_MspInit+0x2c8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d15a      	bne.n	80019ac <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018f6:	2308      	movs	r3, #8
 80018f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001902:	4618      	mov	r0, r3
 8001904:	f002 f8c8 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800190e:	f7ff fa77 	bl	8000e00 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001912:	4b7b      	ldr	r3, [pc, #492]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	4a7a      	ldr	r2, [pc, #488]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001918:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800191c:	6593      	str	r3, [r2, #88]	@ 0x58
 800191e:	4b78      	ldr	r3, [pc, #480]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b75      	ldr	r3, [pc, #468]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a74      	ldr	r2, [pc, #464]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b6f      	ldr	r3, [pc, #444]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a6e      	ldr	r2, [pc, #440]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 800195a:	f248 0303 	movw	r3, #32771	@ 0x8003
 800195e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001974:	2308      	movs	r3, #8
 8001976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800197e:	4619      	mov	r1, r3
 8001980:	4862      	ldr	r0, [pc, #392]	@ (8001b0c <HAL_UART_MspInit+0x2cc>)
 8001982:	f000 fd5b 	bl	800243c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019a2:	4619      	mov	r1, r3
 80019a4:	4857      	ldr	r0, [pc, #348]	@ (8001b04 <HAL_UART_MspInit+0x2c4>)
 80019a6:	f000 fd49 	bl	800243c <HAL_GPIO_Init>
}
 80019aa:	e0f8      	b.n	8001b9e <HAL_UART_MspInit+0x35e>
  else if(uartHandle->Instance==USART1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a57      	ldr	r2, [pc, #348]	@ (8001b10 <HAL_UART_MspInit+0x2d0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d160      	bne.n	8001a78 <HAL_UART_MspInit+0x238>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019ba:	2300      	movs	r3, #0
 80019bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 f868 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_UART_MspInit+0x192>
      Error_Handler();
 80019ce:	f7ff fa17 	bl	8000e00 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019de:	4b48      	ldr	r3, [pc, #288]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	623b      	str	r3, [r7, #32]
 80019e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b45      	ldr	r3, [pc, #276]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a44      	ldr	r2, [pc, #272]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b42      	ldr	r3, [pc, #264]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a02:	4b3f      	ldr	r3, [pc, #252]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	4a3e      	ldr	r2, [pc, #248]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001a1a:	f001 f843 	bl	8002aa4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a42:	4619      	mov	r1, r3
 8001a44:	4831      	ldr	r0, [pc, #196]	@ (8001b0c <HAL_UART_MspInit+0x2cc>)
 8001a46:	f000 fcf9 	bl	800243c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a64:	2307      	movs	r3, #7
 8001a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4828      	ldr	r0, [pc, #160]	@ (8001b14 <HAL_UART_MspInit+0x2d4>)
 8001a72:	f000 fce3 	bl	800243c <HAL_GPIO_Init>
}
 8001a76:	e092      	b.n	8001b9e <HAL_UART_MspInit+0x35e>
  else if(uartHandle->Instance==USART2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_UART_MspInit+0x2d8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d14c      	bne.n	8001b1c <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 f802 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8001a9a:	f7ff f9b1 	bl	8000e00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	4a11      	ldr	r2, [pc, #68]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_UART_MspInit+0x2c0>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	@ (8001b0c <HAL_UART_MspInit+0x2cc>)
 8001af4:	f000 fca2 	bl	800243c <HAL_GPIO_Init>
}
 8001af8:	e051      	b.n	8001b9e <HAL_UART_MspInit+0x35e>
 8001afa:	bf00      	nop
 8001afc:	40008000 	.word	0x40008000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	42020400 	.word	0x42020400
 8001b08:	40004c00 	.word	0x40004c00
 8001b0c:	42020000 	.word	0x42020000
 8001b10:	40013800 	.word	0x40013800
 8001b14:	42021800 	.word	0x42021800
 8001b18:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_UART_MspInit+0x368>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d13b      	bne.n	8001b9e <HAL_UART_MspInit+0x35e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b26:	2304      	movs	r3, #4
 8001b28:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 ffb0 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_UART_MspInit+0x302>
      Error_Handler();
 8001b3e:	f7ff f95f 	bl	8000e00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b42:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	4a19      	ldr	r2, [pc, #100]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a13      	ldr	r2, [pc, #76]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b92:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_UART_MspInit+0x370>)
 8001b9a:	f000 fc4f 	bl	800243c <HAL_GPIO_Init>
}
 8001b9e:	bf00      	nop
 8001ba0:	37e0      	adds	r7, #224	@ 0xe0
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	42020c00 	.word	0x42020c00

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb8:	f7ff fac0 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bbe:	e003      	b.n	8001bc8 <LoopCopyDataInit>

08001bc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bc6:	3104      	adds	r1, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc8:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bcc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bd0:	d3f6      	bcc.n	8001bc0 <CopyDataInit>
	ldr	r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bd4:	e002      	b.n	8001bdc <LoopFillZerobss>

08001bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd8:	f842 3b04 	str.w	r3, [r2], #4

08001bdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <LoopForever+0x16>)
	cmp	r2, r3
 8001bde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001be0:	d3f9      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be2:	f004 ffb5 	bl	8006b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7fe fff1 	bl	8000bcc <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bec:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001bf0:	08006c54 	.word	0x08006c54
	ldr	r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001bfc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001c00:	20000664 	.word	0x20000664

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>

08001c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001c10:	2004      	movs	r0, #4
 8001c12:	f000 f93f 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001c16:	f7ff faa3 	bl	8001160 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1a:	2007      	movs	r0, #7
 8001c1c:	f000 f80e 	bl	8001c3c <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	e001      	b.n	8001c30 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2c:	f7ff fa1e 	bl	800106c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_InitTick+0x70>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f947 	bl	8001efa <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b07      	cmp	r3, #7
 8001c76:	d809      	bhi.n	8001c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c80:	f000 f913 	bl	8001eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_InitTick+0x74>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e004      	b.n	8001c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e001      	b.n	8001c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	2000064c 	.word	0x2000064c

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000064c 	.word	0x2000064c

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0152      	lsls	r2, r2, #5
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0152      	lsls	r2, r2, #5
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	bf28      	it	cs
 8001e06:	2303      	movcs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3303      	adds	r3, #3
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b04      	subs	r3, #4
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	2107      	movs	r1, #7
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff40 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff90 	bl	8001de8 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5f 	bl	8001d94 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff33 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa4 	bl	8001e50 <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d106      	bne.n	8001f30 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a08      	ldr	r2, [pc, #32]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f2e:	e005      	b.n	8001f3c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08d      	b.n	800207a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_DMA_Init+0x138>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d80f      	bhi.n	8001f8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b45      	ldr	r3, [pc, #276]	@ (8002088 <HAL_DMA_Init+0x13c>)
 8001f72:	4413      	add	r3, r2
 8001f74:	4a45      	ldr	r2, [pc, #276]	@ (800208c <HAL_DMA_Init+0x140>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a42      	ldr	r2, [pc, #264]	@ (8002090 <HAL_DMA_Init+0x144>)
 8001f86:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f88:	e00e      	b.n	8001fa8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b40      	ldr	r3, [pc, #256]	@ (8002094 <HAL_DMA_Init+0x148>)
 8001f92:	4413      	add	r3, r2
 8001f94:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_DMA_Init+0x140>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	009a      	lsls	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002098 <HAL_DMA_Init+0x14c>)
 8001fa6:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8001fbe:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8001fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f97e 	bl	80022fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002008:	d102      	bne.n	8002010 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002024:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <HAL_DMA_Init+0x104>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d80c      	bhi.n	8002050 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f99e 	bl	8002378 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	e008      	b.n	8002062 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020407 	.word	0x40020407
 8002088:	bffdfff8 	.word	0xbffdfff8
 800208c:	cccccccd 	.word	0xcccccccd
 8002090:	40020000 	.word	0x40020000
 8002094:	bffdfbf8 	.word	0xbffdfbf8
 8002098:	40020400 	.word	0x40020400

0800209c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	f003 031c 	and.w	r3, r3, #28
 80020bc:	2204      	movs	r2, #4
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d053      	beq.n	8002170 <HAL_DMA_IRQHandler+0xd4>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04e      	beq.n	8002170 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d024      	beq.n	800212a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	f003 021c 	and.w	r2, r3, #28
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ec:	2104      	movs	r1, #4
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80c0 	beq.w	800228c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002114:	e0ba      	b.n	800228c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80b6 	beq.w	800228c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002128:	e0b0      	b.n	800228c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0204 	bic.w	r2, r2, #4
 8002146:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214c:	f003 021c 	and.w	r2, r3, #28
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	2104      	movs	r1, #4
 8002156:	fa01 f202 	lsl.w	r2, r1, r2
 800215a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8093 	beq.w	800228c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800216e:	e08d      	b.n	800228c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	f003 031c 	and.w	r3, r3, #28
 8002178:	2202      	movs	r2, #2
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d04e      	beq.n	8002222 <HAL_DMA_IRQHandler+0x186>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d049      	beq.n	8002222 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d018      	beq.n	80021ce <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d108      	bne.n	80021bc <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06e      	beq.n	8002290 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80021ba:	e069      	b.n	8002290 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d065      	beq.n	8002290 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80021cc:	e060      	b.n	8002290 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020a 	bic.w	r2, r2, #10
 80021ea:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	f003 021c 	and.w	r2, r3, #28
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002200:	2102      	movs	r1, #2
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d03b      	beq.n	8002290 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002220:	e036      	b.n	8002290 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 031c 	and.w	r3, r3, #28
 800222a:	2208      	movs	r2, #8
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02e      	beq.n	8002294 <HAL_DMA_IRQHandler+0x1f8>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d029      	beq.n	8002294 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002254:	f003 021c 	and.w	r2, r3, #28
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225c:	2101      	movs	r1, #1
 800225e:	fa01 f202 	lsl.w	r2, r1, r2
 8002262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800228a:	e002      	b.n	8002292 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002290:	bf00      	nop
  return;
 8002292:	bf00      	nop
 8002294:	bf00      	nop
}
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	72fb      	strb	r3, [r7, #11]
    return status;
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	e01b      	b.n	80022f0 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e003      	b.n	80022e6 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022e4:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]

  return status;
 80022ee:	7afb      	ldrb	r3, [r7, #11]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800230c:	429a      	cmp	r2, r3
 800230e:	d80a      	bhi.n	8002326 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800231c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6513      	str	r3, [r2, #80]	@ 0x50
 8002324:	e007      	b.n	8002336 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	009a      	lsls	r2, r3, #2
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002330:	4413      	add	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3b08      	subs	r3, #8
 800233e:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2201      	movs	r2, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40020407 	.word	0x40020407
 800236c:	40020820 	.word	0x40020820
 8002370:	cccccccd 	.word	0xcccccccd
 8002374:	40020880 	.word	0x40020880

08002378 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	461a      	mov	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a08      	ldr	r2, [pc, #32]	@ (80023bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800239a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	1000823f 	.word	0x1000823f
 80023bc:	40020940 	.word	0x40020940

080023c0 <HAL_EXTI_ConfigLineAttributes>:
  *            @arg @ref EXTI_LINE_SEC          Secure-only access
  *            @arg @ref EXTI_LINE_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_EXTI_ConfigLineAttributes(uint32_t ExtiLine, uint32_t LineAttributes)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
  assert_param(IS_EXTI_LINE_ATTRIBUTES(LineAttributes));

  /* compute line register offset and line mask */
  offset = ((ExtiLine & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
  linepos = (ExtiLine & EXTI_PIN_MASK);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
 80023dc:	2201      	movs	r2, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	613b      	str	r3, [r7, #16]

  /* Configure privilege or non-privilege attributes */
  regaddr = (&EXTI->PRIVCFGR1 + (EXTI_PRIVCFGR_OFFSET * offset));
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	011a      	lsls	r2, r3, #4
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_EXTI_ConfigLineAttributes+0x78>)
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if((LineAttributes & EXTI_LINE_PRIV) == EXTI_LINE_PRIV)
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	f240 2302 	movw	r3, #514	@ 0x202
 80023fc:	4013      	ands	r3, r2
 80023fe:	f240 2202 	movw	r2, #514	@ 0x202
 8002402:	4293      	cmp	r3, r2
 8002404:	d104      	bne.n	8002410 <HAL_EXTI_ConfigLineAttributes+0x50>
  {
    regval |= maskline;
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e009      	b.n	8002424 <HAL_EXTI_ConfigLineAttributes+0x64>
  }
  else if((LineAttributes & EXTI_LINE_NPRIV) == EXTI_LINE_NPRIV)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_EXTI_ConfigLineAttributes+0x64>
  {
    regval &= ~maskline;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	4013      	ands	r3, r2
 8002422:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store privilege or non-privilege attribute */
  *regaddr = regval;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	601a      	str	r2, [r3, #0]

  /* Store secure or non-secure attribute */
  *regaddr = regval;

#endif /* __ARM_FEATURE_CMSE */
}
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	4002f418 	.word	0x4002f418

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800244a:	e158      	b.n	80026fe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 814a 	beq.w	80026f8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d005      	beq.n	800247c <HAL_GPIO_Init+0x40>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d130      	bne.n	80024de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024b2:	2201      	movs	r2, #1
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f003 0201 	and.w	r2, r3, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d017      	beq.n	800251a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d123      	bne.n	800256e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	6939      	ldr	r1, [r7, #16]
 800256a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0203 	and.w	r2, r3, #3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80a4 	beq.w	80026f8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80025b0:	4a5a      	ldr	r2, [pc, #360]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3318      	adds	r3, #24
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_GPIO_Init+0x2e4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d025      	beq.n	8002628 <HAL_GPIO_Init+0x1ec>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a51      	ldr	r2, [pc, #324]	@ (8002724 <HAL_GPIO_Init+0x2e8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01f      	beq.n	8002624 <HAL_GPIO_Init+0x1e8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <HAL_GPIO_Init+0x2ec>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d019      	beq.n	8002620 <HAL_GPIO_Init+0x1e4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4f      	ldr	r2, [pc, #316]	@ (800272c <HAL_GPIO_Init+0x2f0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_GPIO_Init+0x1e0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002730 <HAL_GPIO_Init+0x2f4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x1dc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_GPIO_Init+0x2f8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x1d8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a4c      	ldr	r2, [pc, #304]	@ (8002738 <HAL_GPIO_Init+0x2fc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_Init+0x1d4>
 800260c:	2306      	movs	r3, #6
 800260e:	e00c      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002610:	2307      	movs	r3, #7
 8002612:	e00a      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002614:	2305      	movs	r3, #5
 8002616:	e008      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002618:	2304      	movs	r3, #4
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 800261c:	2303      	movs	r3, #3
 800261e:	e004      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_GPIO_Init+0x1ee>
 8002628:	2300      	movs	r3, #0
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	00d2      	lsls	r2, r2, #3
 8002632:	4093      	lsls	r3, r2
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800263a:	4938      	ldr	r1, [pc, #224]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3318      	adds	r3, #24
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002648:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800266c:	4a2b      	ldr	r2, [pc, #172]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002672:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002696:	4a21      	ldr	r2, [pc, #132]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 800269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c2:	4a16      	ldr	r2, [pc, #88]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 80026cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026f0:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_GPIO_Init+0x2e0>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	f47f ae9f 	bne.w	800244c <HAL_GPIO_Init+0x10>
  }
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	4002f400 	.word	0x4002f400
 8002720:	42020000 	.word	0x42020000
 8002724:	42020400 	.word	0x42020400
 8002728:	42020800 	.word	0x42020800
 800272c:	42020c00 	.word	0x42020c00
 8002730:	42021000 	.word	0x42021000
 8002734:	42021400 	.word	0x42021400
 8002738:	42021800 	.word	0x42021800

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002758:	e002      	b.n	8002760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e08d      	b.n	800289a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe f92e 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	@ 0x24
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	e006      	b.n	80027f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d108      	bne.n	800280e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	e007      	b.n	800281e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800281c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800282c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69d9      	ldr	r1, [r3, #28]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d138      	bne.n	800292a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e032      	b.n	800292c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2224      	movs	r2, #36	@ 0x24
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	d139      	bne.n	80029c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002958:	2302      	movs	r3, #2
 800295a:	e033      	b.n	80029c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	@ 0x24
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800298a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000

080029ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029fc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80029fe:	f000 f871 	bl	8002ae4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a08:	d101      	bne.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e03e      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002a0e:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a1a:	d101      	bne.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e035      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d101      	bne.n	8002a2c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e02f      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002a34:	4917      	ldr	r1, [pc, #92]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	09db      	lsrs	r3, r3, #7
 8002a4a:	2232      	movs	r2, #50	@ 0x32
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	4a13      	ldr	r2, [pc, #76]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5c:	e002      	b.n	8002a64 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a70:	d102      	bne.n	8002a78 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f2      	bne.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a84:	d101      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e000      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40007000 	.word	0x40007000
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002aa0:	cccccccd 	.word	0xcccccccd

08002aa4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ab2:	6053      	str	r3, [r2, #4]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40007000 	.word	0x40007000

08002ac4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ace:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad2:	6093      	str	r3, [r2, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e00a      	b.n	8002b18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	e001      	b.n	8002b18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f000 bcc2 	b.w	80034c4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4b99      	ldr	r3, [pc, #612]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4a:	4b97      	ldr	r3, [pc, #604]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80e9 	beq.w	8002d34 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4a>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	f040 8083 	bne.w	8002c76 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d17f      	bne.n	8002c76 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b76:	4b8c      	ldr	r3, [pc, #560]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <HAL_RCC_OscConfig+0x64>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f000 bc9a 	b.w	80034c4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b94:	4b84      	ldr	r3, [pc, #528]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_RCC_OscConfig+0x7e>
 8002ba0:	4b81      	ldr	r3, [pc, #516]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba8:	e005      	b.n	8002bb6 <HAL_RCC_OscConfig+0x8a>
 8002baa:	4b7f      	ldr	r3, [pc, #508]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d224      	bcs.n	8002c04 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fe9a 	bl	80038f8 <RCC_SetFlashLatencyFromMSIRange>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f000 bc7a 	b.w	80034c4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd0:	4b75      	ldr	r3, [pc, #468]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a74      	ldr	r2, [pc, #464]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b72      	ldr	r3, [pc, #456]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	496f      	ldr	r1, [pc, #444]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bee:	4b6e      	ldr	r3, [pc, #440]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	496a      	ldr	r1, [pc, #424]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
 8002c02:	e026      	b.n	8002c52 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c04:	4b68      	ldr	r3, [pc, #416]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a67      	ldr	r2, [pc, #412]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b65      	ldr	r3, [pc, #404]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	4962      	ldr	r1, [pc, #392]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c22:	4b61      	ldr	r3, [pc, #388]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	495d      	ldr	r1, [pc, #372]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fe59 	bl	80038f8 <RCC_SetFlashLatencyFromMSIRange>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f000 bc39 	b.w	80034c4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c52:	f000 fe15 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a54      	ldr	r2, [pc, #336]	@ (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c5c:	4b54      	ldr	r3, [pc, #336]	@ (8002db0 <HAL_RCC_OscConfig+0x284>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ffeb 	bl	8001c3c <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d060      	beq.n	8002d32 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	f000 bc27 	b.w	80034c4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d039      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a49      	ldr	r2, [pc, #292]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c8a:	f7ff f827 	bl	8001cdc <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c90:	e00f      	b.n	8002cb2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c92:	f7ff f823 	bl	8001cdc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d908      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca0:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	f000 bc09 	b.w	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0e9      	beq.n	8002c92 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a39      	ldr	r2, [pc, #228]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b37      	ldr	r3, [pc, #220]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	4934      	ldr	r1, [pc, #208]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	492f      	ldr	r1, [pc, #188]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	e020      	b.n	8002d34 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe ffed 	bl	8001cdc <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d06:	f7fe ffe9 	bl	8001cdc <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d14:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e3cf      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x1da>
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d07e      	beq.n	8002e3e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x226>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	d10e      	bne.n	8002d6a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d06e      	beq.n	8002e3c <HAL_RCC_OscConfig+0x310>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d16a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e3ac      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x256>
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0b      	ldr	r2, [pc, #44]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e024      	b.n	8002dcc <HAL_RCC_OscConfig+0x2a0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d8a:	d113      	bne.n	8002db4 <HAL_RCC_OscConfig+0x288>
 8002d8c:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a05      	ldr	r2, [pc, #20]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a02      	ldr	r2, [pc, #8]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e012      	b.n	8002dcc <HAL_RCC_OscConfig+0x2a0>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004
 8002db4:	4b8b      	ldr	r3, [pc, #556]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8a      	ldr	r2, [pc, #552]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a87      	ldr	r2, [pc, #540]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d019      	beq.n	8002e08 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe ff82 	bl	8001cdc <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dda:	e00e      	b.n	8002dfa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe ff7e 	bl	8001cdc <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d907      	bls.n	8002dfa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dea:	4b7e      	ldr	r3, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e364      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ea      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2b0>
 8002e06:	e01a      	b.n	8002e3e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe ff68 	bl	8001cdc <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0e:	e00e      	b.n	8002e2e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe ff64 	bl	8001cdc <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	@ 0x64
 8002e1c:	d907      	bls.n	8002e2e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1e:	4b71      	ldr	r3, [pc, #452]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e34a      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ea      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2e4>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x330>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5c:	4b61      	ldr	r3, [pc, #388]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x348>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e327      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	4958      	ldr	r1, [pc, #352]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	e04c      	b.n	8002f24 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d029      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b54      	ldr	r3, [pc, #336]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a53      	ldr	r2, [pc, #332]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe ff1d 	bl	8001cdc <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	e00e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe ff19 	bl	8001cdc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d907      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e2ff      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec4:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ea      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b44      	ldr	r3, [pc, #272]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4941      	ldr	r1, [pc, #260]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
 8002ee4:	e01e      	b.n	8002f24 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fef3 	bl	8001cdc <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ef8:	e00e      	b.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe feef 	bl	8001cdc <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d907      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f08:	4b36      	ldr	r3, [pc, #216]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e2d5      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f18:	4b32      	ldr	r3, [pc, #200]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ea      	bne.n	8002efa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d062      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d038      	beq.n	8002faa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f46:	4a27      	ldr	r2, [pc, #156]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f50:	e007      	b.n	8002f62 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002f52:	4b24      	ldr	r3, [pc, #144]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f68:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe feb3 	bl	8001cdc <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f78:	e00f      	b.n	8002f9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7fe feaf 	bl	8001cdc <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f88:	4b16      	ldr	r3, [pc, #88]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e294      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0e8      	beq.n	8002f7a <HAL_RCC_OscConfig+0x44e>
 8002fa8:	e025      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe fe8f 	bl	8001cdc <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc0:	e012      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fe fe8b 	bl	8001cdc <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	d90b      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e270      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe8:	4ba8      	ldr	r3, [pc, #672]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 812d 	beq.w	800325e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003008:	4ba0      	ldr	r3, [pc, #640]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	4b9d      	ldr	r3, [pc, #628]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	4a9c      	ldr	r2, [pc, #624]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003020:	4b9a      	ldr	r3, [pc, #616]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	4b97      	ldr	r3, [pc, #604]	@ (8003290 <HAL_RCC_OscConfig+0x764>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11e      	bne.n	800307a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b94      	ldr	r3, [pc, #592]	@ (8003290 <HAL_RCC_OscConfig+0x764>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a93      	ldr	r2, [pc, #588]	@ (8003290 <HAL_RCC_OscConfig+0x764>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003046:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003048:	f7fe fe48 	bl	8001cdc <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304e:	e00e      	b.n	800306e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fe fe44 	bl	8001cdc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d907      	bls.n	800306e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305e:	4b8c      	ldr	r3, [pc, #560]	@ (8003290 <HAL_RCC_OscConfig+0x764>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e22a      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800306e:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x764>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ea      	beq.n	8003050 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01f      	beq.n	80030c6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003092:	4b7e      	ldr	r3, [pc, #504]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	4a7c      	ldr	r2, [pc, #496]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030a2:	4b7a      	ldr	r3, [pc, #488]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a8:	4a78      	ldr	r2, [pc, #480]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030b2:	e018      	b.n	80030e6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030b4:	4b75      	ldr	r3, [pc, #468]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	4a74      	ldr	r2, [pc, #464]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030c4:	e00f      	b.n	80030e6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030c6:	4b71      	ldr	r3, [pc, #452]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	4a6f      	ldr	r2, [pc, #444]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030d6:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	4a6b      	ldr	r2, [pc, #428]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80030de:	f023 0304 	bic.w	r3, r3, #4
 80030e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d068      	beq.n	80031c0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fdf5 	bl	8001cdc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f4:	e011      	b.n	800311a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe fdf1 	bl	8001cdc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d908      	bls.n	800311a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003108:	4b60      	ldr	r3, [pc, #384]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1d4      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311a:	4b5c      	ldr	r3, [pc, #368]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0e6      	beq.n	80030f6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d022      	beq.n	800317a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003134:	4b55      	ldr	r3, [pc, #340]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800313c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003144:	e011      	b.n	800316a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fe fdc9 	bl	8001cdc <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d908      	bls.n	800316a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003158:	4b4c      	ldr	r3, [pc, #304]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e1ac      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800316a:	4b48      	ldr	r3, [pc, #288]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0e6      	beq.n	8003146 <HAL_RCC_OscConfig+0x61a>
 8003178:	e068      	b.n	800324c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800317a:	4b44      	ldr	r3, [pc, #272]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003180:	4a42      	ldr	r2, [pc, #264]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800318a:	e011      	b.n	80031b0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fda6 	bl	8001cdc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d908      	bls.n	80031b0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e189      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031b0:	4b36      	ldr	r3, [pc, #216]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <HAL_RCC_OscConfig+0x660>
 80031be:	e045      	b.n	800324c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe fd8c 	bl	8001cdc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c6:	e011      	b.n	80031ec <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd88 	bl	8001cdc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d908      	bls.n	80031ec <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031da:	4b2c      	ldr	r3, [pc, #176]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e16b      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	4b27      	ldr	r3, [pc, #156]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e6      	bne.n	80031c8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	d021      	beq.n	800324c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003208:	4b20      	ldr	r3, [pc, #128]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a1f      	ldr	r2, [pc, #124]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003218:	e011      	b.n	800323e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fd5f 	bl	8001cdc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d908      	bls.n	800323e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800322c:	4b17      	ldr	r3, [pc, #92]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e142      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e6      	bne.n	800321a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324c:	7ffb      	ldrb	r3, [r7, #31]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003252:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d04f      	beq.n	800330a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d028      	beq.n	80032c4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 8003274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_RCC_OscConfig+0x760>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fd2b 	bl	8001cdc <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003288:	e014      	b.n	80032b4 <HAL_RCC_OscConfig+0x788>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003294:	f7fe fd22 	bl	8001cdc <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d908      	bls.n	80032b4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032a2:	4b8a      	ldr	r3, [pc, #552]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80032a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e107      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032b4:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80032b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0e8      	beq.n	8003294 <HAL_RCC_OscConfig+0x768>
 80032c2:	e022      	b.n	800330a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032c4:	4b81      	ldr	r3, [pc, #516]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80032c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ca:	4a80      	ldr	r2, [pc, #512]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fd02 	bl	8001cdc <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032da:	e00f      	b.n	80032fc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032dc:	f7fe fcfe 	bl	8001cdc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032ea:	4b78      	ldr	r3, [pc, #480]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80032ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0e3      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032fc:	4b73      	ldr	r3, [pc, #460]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80032fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e8      	bne.n	80032dc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80d7 	beq.w	80034c2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003314:	4b6d      	ldr	r3, [pc, #436]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b0c      	cmp	r3, #12
 800331e:	f000 8091 	beq.w	8003444 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	2b02      	cmp	r3, #2
 8003328:	d166      	bne.n	80033f8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b68      	ldr	r3, [pc, #416]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a67      	ldr	r2, [pc, #412]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 8003330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fcd1 	bl	8001cdc <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333c:	e00e      	b.n	800335c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe fccd 	bl	8001cdc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d907      	bls.n	800335c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	4b5f      	ldr	r3, [pc, #380]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0b3      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335c:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ea      	bne.n	800333e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b58      	ldr	r3, [pc, #352]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	4b58      	ldr	r3, [pc, #352]	@ (80034d0 <HAL_RCC_OscConfig+0x9a4>)
 800336e:	4013      	ands	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003378:	3a01      	subs	r2, #1
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	4311      	orrs	r1, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003382:	0212      	lsls	r2, r2, #8
 8003384:	4311      	orrs	r1, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800338a:	0852      	lsrs	r2, r2, #1
 800338c:	3a01      	subs	r2, #1
 800338e:	0552      	lsls	r2, r2, #21
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003396:	0852      	lsrs	r2, r2, #1
 8003398:	3a01      	subs	r2, #1
 800339a:	0652      	lsls	r2, r2, #25
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033a2:	06d2      	lsls	r2, r2, #27
 80033a4:	430a      	orrs	r2, r1
 80033a6:	4949      	ldr	r1, [pc, #292]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a46      	ldr	r2, [pc, #280]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b8:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a43      	ldr	r2, [pc, #268]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fc8a 	bl	8001cdc <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ca:	e00e      	b.n	80033ea <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fc86 	bl	8001cdc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d907      	bls.n	80033ea <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b3c      	ldr	r3, [pc, #240]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e06c      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ea      	beq.n	80033cc <HAL_RCC_OscConfig+0x8a0>
 80033f6:	e064      	b.n	80034c2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b34      	ldr	r3, [pc, #208]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a33      	ldr	r2, [pc, #204]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fc6a 	bl	8001cdc <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340a:	e00e      	b.n	800342a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fc66 	bl	8001cdc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d907      	bls.n	800342a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341a:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e04c      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342a:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ea      	bne.n	800340c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003436:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4924      	ldr	r1, [pc, #144]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 800343c:	4b25      	ldr	r3, [pc, #148]	@ (80034d4 <HAL_RCC_OscConfig+0x9a8>)
 800343e:	4013      	ands	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
 8003442:	e03e      	b.n	80034c2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e039      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003450:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_OscConfig+0x9a0>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	429a      	cmp	r2, r3
 8003462:	d12c      	bne.n	80034be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	3b01      	subs	r3, #1
 8003470:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d123      	bne.n	80034be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d11b      	bne.n	80034be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d113      	bne.n	80034be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d109      	bne.n	80034be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	3b01      	subs	r3, #1
 80034b8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	019f800c 	.word	0x019f800c
 80034d4:	feeefffc 	.word	0xfeeefffc

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e11c      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b90      	ldr	r3, [pc, #576]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d910      	bls.n	8003520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 020f 	bic.w	r2, r3, #15
 8003506:	498b      	ldr	r1, [pc, #556]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b89      	ldr	r3, [pc, #548]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e104      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4b81      	ldr	r3, [pc, #516]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003538:	429a      	cmp	r2, r3
 800353a:	d908      	bls.n	800354e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b7e      	ldr	r3, [pc, #504]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	497b      	ldr	r1, [pc, #492]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8085 	beq.w	8003666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d11f      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003564:	4b74      	ldr	r3, [pc, #464]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0da      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003574:	f000 fa24 	bl	80039c0 <RCC_GetSysClockFreqFromPLLSource>
 8003578:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4a6f      	ldr	r2, [pc, #444]	@ (800373c <HAL_RCC_ClockConfig+0x264>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d947      	bls.n	8003612 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d141      	bne.n	8003612 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003596:	4a68      	ldr	r2, [pc, #416]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800359c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800359e:	2380      	movs	r3, #128	@ 0x80
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	e036      	b.n	8003612 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ac:	4b62      	ldr	r3, [pc, #392]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d115      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b6      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0aa      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d4:	4b58      	ldr	r3, [pc, #352]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0a2      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035e4:	f000 f8b0 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4a53      	ldr	r2, [pc, #332]	@ (800373c <HAL_RCC_ClockConfig+0x264>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d90f      	bls.n	8003612 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035f2:	4b51      	ldr	r3, [pc, #324]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003606:	4a4c      	ldr	r2, [pc, #304]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800360c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b49      	ldr	r3, [pc, #292]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4946      	ldr	r1, [pc, #280]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fe fb5a 	bl	8001cdc <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e013      	b.n	8003654 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fb56 	bl	8001cdc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d90a      	bls.n	8003654 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b3e      	ldr	r3, [pc, #248]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e06a      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003654:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 020c 	and.w	r2, r3, #12
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	429a      	cmp	r2, r3
 8003664:	d1e2      	bne.n	800362c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b80      	cmp	r3, #128	@ 0x80
 800366a:	d105      	bne.n	8003678 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800366c:	4b32      	ldr	r3, [pc, #200]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a31      	ldr	r2, [pc, #196]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003676:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d010      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003690:	429a      	cmp	r2, r3
 8003692:	d208      	bcs.n	80036a6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4925      	ldr	r1, [pc, #148]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a6:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d210      	bcs.n	80036d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 020f 	bic.w	r2, r3, #15
 80036bc:	491d      	ldr	r1, [pc, #116]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <HAL_RCC_ClockConfig+0x25c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e029      	b.n	800372a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e2:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4912      	ldr	r1, [pc, #72]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003700:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	490a      	ldr	r1, [pc, #40]	@ (8003738 <HAL_RCC_ClockConfig+0x260>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003714:	f000 f8b4 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 8003718:	4603      	mov	r3, r0
 800371a:	4a09      	ldr	r2, [pc, #36]	@ (8003740 <HAL_RCC_ClockConfig+0x268>)
 800371c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800371e:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_RCC_ClockConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fa8a 	bl	8001c3c <HAL_InitTick>
 8003728:	4603      	mov	r3, r0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40022000 	.word	0x40022000
 8003738:	40021000 	.word	0x40021000
 800373c:	04c4b400 	.word	0x04c4b400
 8003740:	20000000 	.word	0x20000000
 8003744:	20000004 	.word	0x20000004

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	@ 0x24
 800374c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003760:	4b44      	ldr	r3, [pc, #272]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x34>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d121      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11e      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800377c:	4b3d      	ldr	r3, [pc, #244]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003788:	4b3a      	ldr	r3, [pc, #232]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e005      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003798:	4b36      	ldr	r3, [pc, #216]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80037a4:	4a34      	ldr	r2, [pc, #208]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x130>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c0:	4b2e      	ldr	r3, [pc, #184]	@ (800387c <HAL_RCC_GetSysClockFreq+0x134>)
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e004      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037cc:	4b2b      	ldr	r3, [pc, #172]	@ (800387c <HAL_RCC_GetSysClockFreq+0x134>)
 80037ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d146      	bne.n	8003864 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037d6:	4b27      	ldr	r3, [pc, #156]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e0:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3301      	adds	r3, #1
 80037ec:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d003      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0xb4>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d00d      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0xce>
 80037fa:	e019      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037fc:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <HAL_RCC_GetSysClockFreq+0x134>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003806:	68d2      	ldr	r2, [r2, #12]
 8003808:	0a12      	lsrs	r2, r2, #8
 800380a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
        break;
 8003814:	e019      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003816:	4a19      	ldr	r2, [pc, #100]	@ (800387c <HAL_RCC_GetSysClockFreq+0x134>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4a15      	ldr	r2, [pc, #84]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	0a12      	lsrs	r2, r2, #8
 8003824:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
        break;
 800382e:	e00c      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	4a0e      	ldr	r2, [pc, #56]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 800383a:	68d2      	ldr	r2, [r2, #12]
 800383c:	0a12      	lsrs	r2, r2, #8
 800383e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	617b      	str	r3, [r7, #20]
        break;
 8003848:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x12c>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	0e5b      	lsrs	r3, r3, #25
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	3301      	adds	r3, #1
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003864:	69bb      	ldr	r3, [r7, #24]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	@ 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	08006bc8 	.word	0x08006bc8
 800387c:	00f42400 	.word	0x00f42400

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003884:	f7ff ff60 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	4903      	ldr	r1, [pc, #12]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08006bb0 	.word	0x08006bb0

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038ac:	f7ff ffe8 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08006bc0 	.word	0x08006bc0

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d4:	f7ff ffd4 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0adb      	lsrs	r3, r3, #11
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08006bc0 	.word	0x08006bc0

080038f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003904:	4b2c      	ldr	r3, [pc, #176]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003910:	f7ff f85e 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 8003914:	6138      	str	r0, [r7, #16]
 8003916:	e014      	b.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003918:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003922:	6593      	str	r3, [r2, #88]	@ 0x58
 8003924:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003930:	f7ff f84e 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 8003934:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003936:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	4a1f      	ldr	r2, [pc, #124]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800393c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394e:	d10b      	bne.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b80      	cmp	r3, #128	@ 0x80
 8003954:	d919      	bls.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2ba0      	cmp	r3, #160	@ 0xa0
 800395a:	d902      	bls.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395c:	2302      	movs	r3, #2
 800395e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003960:	e013      	b.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003966:	e010      	b.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b80      	cmp	r3, #128	@ 0x80
 800396c:	d902      	bls.n	8003974 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800396e:	2303      	movs	r3, #3
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e00a      	b.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b80      	cmp	r3, #128	@ 0x80
 8003978:	d102      	bne.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800397a:	2302      	movs	r3, #2
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e004      	b.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b70      	cmp	r3, #112	@ 0x70
 8003984:	d101      	bne.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003986:	2301      	movs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 020f 	bic.w	r2, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40022000 	.word	0x40022000

080039c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c6:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d015      	beq.n	8003a10 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d839      	bhi.n	8003a5e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d01c      	beq.n	8003a2a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d133      	bne.n	8003a5e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f6:	4a26      	ldr	r2, [pc, #152]	@ (8003a90 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	4a23      	ldr	r2, [pc, #140]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a00:	68d2      	ldr	r2, [r2, #12]
 8003a02:	0a12      	lsrs	r2, r2, #8
 8003a04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	613b      	str	r3, [r7, #16]
      break;
 8003a0e:	e029      	b.n	8003a64 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a10:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a1a:	68d2      	ldr	r2, [r2, #12]
 8003a1c:	0a12      	lsrs	r2, r2, #8
 8003a1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	613b      	str	r3, [r7, #16]
      break;
 8003a28:	e01c      	b.n	8003a64 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a2a:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a36:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e005      	b.n	8003a52 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a46:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003a52:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	613b      	str	r3, [r7, #16]
        break;
 8003a5c:	e002      	b.n	8003a64 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
      break;
 8003a62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0e5b      	lsrs	r3, r3, #25
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a7e:	683b      	ldr	r3, [r7, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	08006bc8 	.word	0x08006bc8

08003a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d040      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d02a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003abc:	2b80      	cmp	r3, #128	@ 0x80
 8003abe:	d825      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ac0:	2b60      	cmp	r3, #96	@ 0x60
 8003ac2:	d026      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ac4:	2b60      	cmp	r3, #96	@ 0x60
 8003ac6:	d821      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d006      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d81d      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d010      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ad8:	e018      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ada:	4b8f      	ldr	r3, [pc, #572]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4a8e      	ldr	r2, [pc, #568]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ae6:	e015      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fb66 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003af8:	e00c      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3320      	adds	r3, #32
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fc43 	bl	800438c <RCCEx_PLLSAI2_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	77fb      	strb	r3, [r7, #31]
        break;
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b14:	7ffb      	ldrb	r3, [r7, #31]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b20:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b28:	497b      	ldr	r1, [pc, #492]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003b30:	e001      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d047      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4a:	d030      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b50:	d82a      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b56:	d02a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5c:	d824      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b62:	d008      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b68:	d81e      	bhi.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b72:	d010      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b74:	e018      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b76:	4b68      	ldr	r3, [pc, #416]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4a67      	ldr	r2, [pc, #412]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b80:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b82:	e015      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fb18 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3320      	adds	r3, #32
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fbf5 	bl	800438c <RCCEx_PLLSAI2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77fb      	strb	r3, [r7, #31]
        break;
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb0:	7ffb      	ldrb	r3, [r7, #31]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bb6:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4954      	ldr	r1, [pc, #336]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	7ffb      	ldrb	r3, [r7, #31]
 8003bd0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80ab 	beq.w	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	4a48      	ldr	r2, [pc, #288]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfc:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0c:	4b43      	ldr	r3, [pc, #268]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a42      	ldr	r2, [pc, #264]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c18:	f7fe f860 	bl	8001cdc <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1e:	e00f      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fe f85c 	bl	8001cdc <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d908      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003c3e:	e006      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0e9      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003c4e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003c50:	7ffb      	ldrb	r3, [r7, #31]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d164      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c60:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d019      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c74:	4b28      	ldr	r3, [pc, #160]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c80:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	4a24      	ldr	r2, [pc, #144]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c90:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	4a20      	ldr	r2, [pc, #128]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fe f813 	bl	8001cdc <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb8:	e012      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fe f80f 	bl	8001cdc <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d909      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003cde:	e007      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0e5      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003cf0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003cf2:	7ffb      	ldrb	r3, [r7, #31]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf8:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d08:	4903      	ldr	r1, [pc, #12]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d10:	e008      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	77bb      	strb	r3, [r7, #30]
 8003d16:	e005      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	7ffb      	ldrb	r3, [r7, #31]
 8003d22:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d42:	4b96      	ldr	r3, [pc, #600]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f023 0203 	bic.w	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	4992      	ldr	r1, [pc, #584]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d64:	4b8d      	ldr	r3, [pc, #564]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	f023 020c 	bic.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	498a      	ldr	r1, [pc, #552]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d86:	4b85      	ldr	r3, [pc, #532]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	4981      	ldr	r1, [pc, #516]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da8:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4979      	ldr	r1, [pc, #484]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dca:	4b74      	ldr	r3, [pc, #464]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	4970      	ldr	r1, [pc, #448]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dec:	4b6b      	ldr	r3, [pc, #428]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dfa:	4968      	ldr	r1, [pc, #416]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b63      	ldr	r3, [pc, #396]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	495f      	ldr	r1, [pc, #380]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e30:	4b5a      	ldr	r3, [pc, #360]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3e:	4957      	ldr	r1, [pc, #348]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003e52:	4b52      	ldr	r3, [pc, #328]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e60:	494e      	ldr	r1, [pc, #312]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d031      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e7c:	d00e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e82:	d814      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e8c:	d10f      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8e:	4b43      	ldr	r3, [pc, #268]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4a42      	ldr	r2, [pc, #264]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e98:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f98c 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	77fb      	strb	r3, [r7, #31]
        break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ebc:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eca:	4934      	ldr	r1, [pc, #208]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ed2:	e001      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
 8003ed6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef2:	492a      	ldr	r1, [pc, #168]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f06:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	4921      	ldr	r1, [pc, #132]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	4919      	ldr	r1, [pc, #100]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f50:	f023 0203 	bic.w	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	4910      	ldr	r1, [pc, #64]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d02b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	4908      	ldr	r1, [pc, #32]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8c:	4b03      	ldr	r3, [pc, #12]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a02      	ldr	r2, [pc, #8]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f96:	60d3      	str	r3, [r2, #12]
 8003f98:	e014      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f905 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003fba:	7ffb      	ldrb	r3, [r7, #31]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d04a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd8:	d108      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003fda:	4b70      	ldr	r3, [pc, #448]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fe6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003fea:	e012      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003fec:	4b6b      	ldr	r3, [pc, #428]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ffa:	4968      	ldr	r1, [pc, #416]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004002:	4b66      	ldr	r3, [pc, #408]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004008:	4a64      	ldr	r2, [pc, #400]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800400a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800400e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004016:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401a:	d10d      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	2101      	movs	r1, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f8cc 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800402c:	7ffb      	ldrb	r3, [r7, #31]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d019      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004032:	7ffb      	ldrb	r3, [r7, #31]
 8004034:	77bb      	strb	r3, [r7, #30]
 8004036:	e016      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800403c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004040:	d106      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004042:	4b56      	ldr	r3, [pc, #344]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4a55      	ldr	r2, [pc, #340]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404c:	60d3      	str	r3, [r2, #12]
 800404e:	e00a      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004058:	d105      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800405a:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4a4f      	ldr	r2, [pc, #316]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d028      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004072:	4b4a      	ldr	r3, [pc, #296]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004078:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004080:	4946      	ldr	r1, [pc, #280]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800408c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004090:	d106      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004092:	4b42      	ldr	r3, [pc, #264]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4a41      	ldr	r2, [pc, #260]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409c:	60d3      	str	r3, [r2, #12]
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f885 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
 80040c2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01e      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d0:	4b32      	ldr	r3, [pc, #200]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e0:	492e      	ldr	r1, [pc, #184]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040f2:	d10c      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f860 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004104:	7ffb      	ldrb	r3, [r7, #31]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800411a:	4b20      	ldr	r3, [pc, #128]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800411c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004120:	f023 0204 	bic.w	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412a:	491c      	ldr	r1, [pc, #112]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800413e:	4b17      	ldr	r3, [pc, #92]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004144:	f023 0218 	bic.w	r2, r3, #24
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	4913      	ldr	r1, [pc, #76]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d017      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004162:	4b0e      	ldr	r3, [pc, #56]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004164:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004168:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004172:	490a      	ldr	r1, [pc, #40]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4a04      	ldr	r2, [pc, #16]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800418c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004190:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004192:	7fbb      	ldrb	r3, [r7, #30]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000

080041a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000

080041c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d018      	beq.n	8004208 <RCCEx_PLLSAI1_Config+0x48>
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d81f      	bhi.n	800421a <RCCEx_PLLSAI1_Config+0x5a>
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d002      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x24>
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d009      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0x36>
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e4:	4b65      	ldr	r3, [pc, #404]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d117      	bne.n	8004220 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e014      	b.n	8004220 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f6:	4b61      	ldr	r3, [pc, #388]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d110      	bne.n	8004224 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004206:	e00d      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004208:	4b5c      	ldr	r3, [pc, #368]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e006      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
      break;
 800421e:	e004      	b.n	800422a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004228:	bf00      	nop
  }

  if (status == HAL_OK)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 809f 	bne.w	8004370 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004232:	4b52      	ldr	r3, [pc, #328]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a51      	ldr	r2, [pc, #324]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004238:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800423c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423e:	f7fd fd4d 	bl	8001cdc <HAL_GetTick>
 8004242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004244:	e00f      	b.n	8004266 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004246:	f7fd fd49 	bl	8001cdc <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d908      	bls.n	8004266 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004254:	4b49      	ldr	r3, [pc, #292]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004264:	e006      	b.n	8004274 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004266:	4b45      	ldr	r3, [pc, #276]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e9      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0x86>
 8004272:	e000      	b.n	8004276 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004274:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d179      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d116      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004282:	4b3e      	ldr	r3, [pc, #248]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	4b3e      	ldr	r3, [pc, #248]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68d2      	ldr	r2, [r2, #12]
 8004294:	06d2      	lsls	r2, r2, #27
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6852      	ldr	r2, [r2, #4]
 800429c:	3a01      	subs	r2, #1
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	4934      	ldr	r1, [pc, #208]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]
 80042ae:	e033      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d118      	bne.n	80042e8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b6:	4b31      	ldr	r3, [pc, #196]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	4b32      	ldr	r3, [pc, #200]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1c4>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6892      	ldr	r2, [r2, #8]
 80042c2:	0211      	lsls	r1, r2, #8
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6912      	ldr	r2, [r2, #16]
 80042c8:	0852      	lsrs	r2, r2, #1
 80042ca:	3a01      	subs	r2, #1
 80042cc:	0552      	lsls	r2, r2, #21
 80042ce:	4311      	orrs	r1, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6852      	ldr	r2, [r2, #4]
 80042d4:	3a01      	subs	r2, #1
 80042d6:	0112      	lsls	r2, r2, #4
 80042d8:	4311      	orrs	r1, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	4926      	ldr	r1, [pc, #152]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]
 80042e6:	e017      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e8:	4b24      	ldr	r3, [pc, #144]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1c8>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6892      	ldr	r2, [r2, #8]
 80042f4:	0211      	lsls	r1, r2, #8
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6952      	ldr	r2, [r2, #20]
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0652      	lsls	r2, r2, #25
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6852      	ldr	r2, [r2, #4]
 8004306:	3a01      	subs	r2, #1
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	491a      	ldr	r1, [pc, #104]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004318:	4b18      	ldr	r3, [pc, #96]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a17      	ldr	r2, [pc, #92]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 800431e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fcda 	bl	8001cdc <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800432a:	e00f      	b.n	800434c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800432c:	f7fd fcd6 	bl	8001cdc <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d908      	bls.n	800434c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433a:	4b10      	ldr	r3, [pc, #64]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800434a:	e006      	b.n	800435a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0e9      	beq.n	800432c <RCCEx_PLLSAI1_Config+0x16c>
 8004358:	e000      	b.n	800435c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800435a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4904      	ldr	r1, [pc, #16]	@ (800437c <RCCEx_PLLSAI1_Config+0x1bc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	07ff800c 	.word	0x07ff800c
 8004384:	ff9f800c 	.word	0xff9f800c
 8004388:	f9ff800c 	.word	0xf9ff800c

0800438c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d018      	beq.n	80043d4 <RCCEx_PLLSAI2_Config+0x48>
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d81f      	bhi.n	80043e6 <RCCEx_PLLSAI2_Config+0x5a>
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d002      	beq.n	80043b0 <RCCEx_PLLSAI2_Config+0x24>
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d009      	beq.n	80043c2 <RCCEx_PLLSAI2_Config+0x36>
 80043ae:	e01a      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b0:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d117      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c0:	e014      	b.n	80043ec <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c2:	4b46      	ldr	r3, [pc, #280]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d110      	bne.n	80043f0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d2:	e00d      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80043d4:	4b41      	ldr	r3, [pc, #260]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e4:	e006      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
      break;
 80043ea:	e004      	b.n	80043f6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80043f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d169      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043fc:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a36      	ldr	r2, [pc, #216]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fd fc68 	bl	8001cdc <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800440e:	e00f      	b.n	8004430 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004410:	f7fd fc64 	bl	8001cdc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d908      	bls.n	8004430 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800441e:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800442e:	e006      	b.n	800443e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004430:	4b2a      	ldr	r3, [pc, #168]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e9      	bne.n	8004410 <RCCEx_PLLSAI2_Config+0x84>
 800443c:	e000      	b.n	8004440 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800443e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d144      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d115      	bne.n	8004478 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800444c:	4b23      	ldr	r3, [pc, #140]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	4b23      	ldr	r3, [pc, #140]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x154>)
 8004452:	4013      	ands	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6892      	ldr	r2, [r2, #8]
 8004458:	0211      	lsls	r1, r2, #8
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68d2      	ldr	r2, [r2, #12]
 800445e:	06d2      	lsls	r2, r2, #27
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6852      	ldr	r2, [r2, #4]
 8004466:	3a01      	subs	r2, #1
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	4311      	orrs	r1, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	491a      	ldr	r1, [pc, #104]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 8004474:	4313      	orrs	r3, r2
 8004476:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004478:	4b18      	ldr	r3, [pc, #96]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd fc2a 	bl	8001cdc <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800448a:	e00f      	b.n	80044ac <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800448c:	f7fd fc26 	bl	8001cdc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d908      	bls.n	80044ac <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80044aa:	e006      	b.n	80044ba <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0e9      	beq.n	800448c <RCCEx_PLLSAI2_Config+0x100>
 80044b8:	e000      	b.n	80044bc <RCCEx_PLLSAI2_Config+0x130>
          break;
 80044ba:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4904      	ldr	r1, [pc, #16]	@ (80044dc <RCCEx_PLLSAI2_Config+0x150>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	07ff800c 	.word	0x07ff800c

080044e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_SD_IRQHandler+0x2e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9be 	bl	800488c <SD_Read_IT>
 8004510:	e199      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80ae 	beq.w	800467e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800453a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800453e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800454e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d038      	beq.n	80045dc <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_SD_IRQHandler+0x9a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d011      	beq.n	80045a2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f002 f8de 	bl	8006744 <SDMMC_CmdStopTransfer>
 8004588:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f96b 	bl	8004878 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a90      	ldr	r2, [pc, #576]	@ (80047e8 <HAL_SD_IRQHandler+0x304>)
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <HAL_SD_IRQHandler+0xe8>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f949 	bl	8004864 <HAL_SD_RxCpltCallback>
 80045d2:	e138      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f93b 	bl	8004850 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045da:	e134      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 812f 	beq.w	8004846 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2200      	movs	r2, #0
 80045ee:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2200      	movs	r2, #0
 80045f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <HAL_SD_IRQHandler+0x130>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f002 f893 	bl	8006744 <SDMMC_CmdStopTransfer>
 800461e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f920 	bl	8004878 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <HAL_SD_IRQHandler+0x176>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8f8 	bl	8004850 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <HAL_SD_IRQHandler+0x192>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80e8 	beq.w	8004846 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8f4 	bl	8004864 <HAL_SD_RxCpltCallback>
}
 800467c:	e0e3      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_SD_IRQHandler+0x1ba>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f93e 	bl	8004918 <SD_Write_IT>
 800469c:	e0d3      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a4:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 809f 	beq.w	80047ec <HAL_SD_IRQHandler+0x308>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c0:	f043 0202 	orr.w	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046da:	f043 0208 	orr.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470e:	f043 0210 	orr.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <HAL_SD_IRQHandler+0x304>)
 800471c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800472c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800474c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800475c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f001 ffee 	bl	8006744 <SDMMC_CmdStopTransfer>
 8004768:	4602      	mov	r2, r0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004782:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f866 	bl	8004878 <HAL_SD_ErrorCallback>
}
 80047ac:	e04b      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d046      	beq.n	8004846 <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d042      	beq.n	8004846 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80047ce:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f849 	bl	8004878 <HAL_SD_ErrorCallback>
}
 80047e6:	e02e      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
 80047e8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d025      	beq.n	8004846 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004802:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10c      	bne.n	800482c <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f8e3 	bl	80049e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8004822:	e010      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f8cb 	bl	80049c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800482a:	e00c      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8cc 	bl	80049d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800483c:	e003      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8b4 	bl	80049ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8004844:	e7ff      	b.n	8004846 <HAL_SD_IRQHandler+0x362>
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop

08004850 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	2b1f      	cmp	r3, #31
 80048a0:	d936      	bls.n	8004910 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e027      	b.n	80048f8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fee1 	bl	8006674 <SDMMC_ReadFIFO>
 80048b2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3301      	adds	r3, #1
 80048c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3301      	adds	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	3301      	adds	r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	0e1b      	lsrs	r3, r3, #24
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3301      	adds	r3, #1
 80048f0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3301      	adds	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	d9d4      	bls.n	80048a8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f1a3 0220 	sub.w	r2, r3, #32
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	2b1f      	cmp	r3, #31
 800492c:	d93a      	bls.n	80049a4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e02b      	b.n	800498c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
      tmp++;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3301      	adds	r3, #1
 8004950:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	041a      	lsls	r2, r3, #16
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	061a      	lsls	r2, r3, #24
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3301      	adds	r3, #1
 8004974:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f107 020c 	add.w	r2, r7, #12
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f001 fe84 	bl	800668e <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b07      	cmp	r3, #7
 8004990:	d9d0      	bls.n	8004934 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f1a3 0220 	sub.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]
  }
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e095      	b.n	8004b3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1e:	d009      	beq.n	8004a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	61da      	str	r2, [r3, #28]
 8004a26:	e005      	b.n	8004a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fa76 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a74:	d902      	bls.n	8004a7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e002      	b.n	8004a82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a8a:	d007      	beq.n	8004a9c <HAL_SPI_Init+0xa0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	ea42 0103 	orr.w	r1, r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 0204 	and.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b18:	ea42 0103 	orr.w	r1, r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e049      	b.n	8004be8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fc fc37 	bl	80013dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 fa4f 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start+0x24>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e03c      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d109      	bne.n	8004c2e <HAL_TIM_PWM_Start+0x3e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e02f      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d109      	bne.n	8004c48 <HAL_TIM_PWM_Start+0x58>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e022      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d109      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x72>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e015      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d109      	bne.n	8004c7c <HAL_TIM_PWM_Start+0x8c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e09c      	b.n	8004dd0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0xb6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ca4:	e023      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0xc6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cb4:	e01b      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start+0xd6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cc4:	e013      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0xe6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cd4:	e00b      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0xf6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce4:	e003      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fd10 	bl	800571c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a35      	ldr	r2, [pc, #212]	@ (8004dd8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a34      	ldr	r2, [pc, #208]	@ (8004ddc <HAL_TIM_PWM_Start+0x1ec>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <HAL_TIM_PWM_Start+0x1f0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a31      	ldr	r2, [pc, #196]	@ (8004de4 <HAL_TIM_PWM_Start+0x1f4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2f      	ldr	r2, [pc, #188]	@ (8004de8 <HAL_TIM_PWM_Start+0x1f8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_Start+0x142>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_TIM_PWM_Start+0x144>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01d      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5a:	d018      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a22      	ldr	r2, [pc, #136]	@ (8004dec <HAL_TIM_PWM_Start+0x1fc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a21      	ldr	r2, [pc, #132]	@ (8004df0 <HAL_TIM_PWM_Start+0x200>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1f      	ldr	r2, [pc, #124]	@ (8004df4 <HAL_TIM_PWM_Start+0x204>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a17      	ldr	r2, [pc, #92]	@ (8004ddc <HAL_TIM_PWM_Start+0x1ec>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <HAL_TIM_PWM_Start+0x1f0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d115      	bne.n	8004dba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <HAL_TIM_PWM_Start+0x208>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b06      	cmp	r3, #6
 8004d9e:	d015      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x1dc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da6:	d011      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	e008      	b.n	8004dcc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e000      	b.n	8004dce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	00010007 	.word	0x00010007

08004dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e0ff      	b.n	800501a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b14      	cmp	r3, #20
 8004e26:	f200 80f0 	bhi.w	800500a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	0800500b 	.word	0x0800500b
 8004e38:	0800500b 	.word	0x0800500b
 8004e3c:	0800500b 	.word	0x0800500b
 8004e40:	08004ec5 	.word	0x08004ec5
 8004e44:	0800500b 	.word	0x0800500b
 8004e48:	0800500b 	.word	0x0800500b
 8004e4c:	0800500b 	.word	0x0800500b
 8004e50:	08004f07 	.word	0x08004f07
 8004e54:	0800500b 	.word	0x0800500b
 8004e58:	0800500b 	.word	0x0800500b
 8004e5c:	0800500b 	.word	0x0800500b
 8004e60:	08004f47 	.word	0x08004f47
 8004e64:	0800500b 	.word	0x0800500b
 8004e68:	0800500b 	.word	0x0800500b
 8004e6c:	0800500b 	.word	0x0800500b
 8004e70:	08004f89 	.word	0x08004f89
 8004e74:	0800500b 	.word	0x0800500b
 8004e78:	0800500b 	.word	0x0800500b
 8004e7c:	0800500b 	.word	0x0800500b
 8004e80:	08004fc9 	.word	0x08004fc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f970 	bl	8005170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0208 	orr.w	r2, r2, #8
 8004e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0204 	bic.w	r2, r2, #4
 8004eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	619a      	str	r2, [r3, #24]
      break;
 8004ec2:	e0a5      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f9e0 	bl	8005290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]
      break;
 8004f04:	e084      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fa49 	bl	80053a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0208 	orr.w	r2, r2, #8
 8004f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0204 	bic.w	r2, r2, #4
 8004f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	61da      	str	r2, [r3, #28]
      break;
 8004f44:	e064      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fab1 	bl	80054b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69d9      	ldr	r1, [r3, #28]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	021a      	lsls	r2, r3, #8
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	61da      	str	r2, [r3, #28]
      break;
 8004f86:	e043      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fafa 	bl	8005588 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fc6:	e023      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fb3e 	bl	8005650 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005008:	e002      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
      break;
 800500e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop

08005024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a46      	ldr	r2, [pc, #280]	@ (8005150 <TIM_Base_SetConfig+0x12c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a43      	ldr	r2, [pc, #268]	@ (8005154 <TIM_Base_SetConfig+0x130>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a42      	ldr	r2, [pc, #264]	@ (8005158 <TIM_Base_SetConfig+0x134>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a41      	ldr	r2, [pc, #260]	@ (800515c <TIM_Base_SetConfig+0x138>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a40      	ldr	r2, [pc, #256]	@ (8005160 <TIM_Base_SetConfig+0x13c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a35      	ldr	r2, [pc, #212]	@ (8005150 <TIM_Base_SetConfig+0x12c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01f      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a32      	ldr	r2, [pc, #200]	@ (8005154 <TIM_Base_SetConfig+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a31      	ldr	r2, [pc, #196]	@ (8005158 <TIM_Base_SetConfig+0x134>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a30      	ldr	r2, [pc, #192]	@ (800515c <TIM_Base_SetConfig+0x138>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <TIM_Base_SetConfig+0x13c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005164 <TIM_Base_SetConfig+0x140>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <TIM_Base_SetConfig+0x144>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0x9a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <TIM_Base_SetConfig+0x148>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <TIM_Base_SetConfig+0x12c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a18      	ldr	r2, [pc, #96]	@ (8005160 <TIM_Base_SetConfig+0x13c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a17      	ldr	r2, [pc, #92]	@ (8005164 <TIM_Base_SetConfig+0x140>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a16      	ldr	r2, [pc, #88]	@ (8005168 <TIM_Base_SetConfig+0x144>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0xf8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a15      	ldr	r2, [pc, #84]	@ (800516c <TIM_Base_SetConfig+0x148>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d105      	bne.n	8005142 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]
  }
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0201 	bic.w	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <TIM_OC1_SetConfig+0x10c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00f      	beq.n	80051f0 <TIM_OC1_SetConfig+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005280 <TIM_OC1_SetConfig+0x110>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_OC1_SetConfig+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2a      	ldr	r2, [pc, #168]	@ (8005284 <TIM_OC1_SetConfig+0x114>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_OC1_SetConfig+0x80>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a29      	ldr	r2, [pc, #164]	@ (8005288 <TIM_OC1_SetConfig+0x118>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC1_SetConfig+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a28      	ldr	r2, [pc, #160]	@ (800528c <TIM_OC1_SetConfig+0x11c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10c      	bne.n	800520a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0308 	bic.w	r3, r3, #8
 80051f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f023 0304 	bic.w	r3, r3, #4
 8005208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <TIM_OC1_SetConfig+0x10c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_OC1_SetConfig+0xc2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <TIM_OC1_SetConfig+0x110>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_OC1_SetConfig+0xc2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <TIM_OC1_SetConfig+0x114>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_OC1_SetConfig+0xc2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a18      	ldr	r2, [pc, #96]	@ (8005288 <TIM_OC1_SetConfig+0x118>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC1_SetConfig+0xc2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a17      	ldr	r2, [pc, #92]	@ (800528c <TIM_OC1_SetConfig+0x11c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d111      	bne.n	8005256 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	621a      	str	r2, [r3, #32]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 0210 	bic.w	r2, r3, #16
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a28      	ldr	r2, [pc, #160]	@ (8005390 <TIM_OC2_SetConfig+0x100>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC2_SetConfig+0x6c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a27      	ldr	r2, [pc, #156]	@ (8005394 <TIM_OC2_SetConfig+0x104>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10d      	bne.n	8005318 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1d      	ldr	r2, [pc, #116]	@ (8005390 <TIM_OC2_SetConfig+0x100>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00f      	beq.n	8005340 <TIM_OC2_SetConfig+0xb0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <TIM_OC2_SetConfig+0x104>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00b      	beq.n	8005340 <TIM_OC2_SetConfig+0xb0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <TIM_OC2_SetConfig+0x108>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_OC2_SetConfig+0xb0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <TIM_OC2_SetConfig+0x10c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0xb0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a19      	ldr	r2, [pc, #100]	@ (80053a0 <TIM_OC2_SetConfig+0x110>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d113      	bne.n	8005368 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40013400 	.word	0x40013400
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800

080053a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a27      	ldr	r2, [pc, #156]	@ (80054a0 <TIM_OC3_SetConfig+0xfc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC3_SetConfig+0x6a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a26      	ldr	r2, [pc, #152]	@ (80054a4 <TIM_OC3_SetConfig+0x100>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10d      	bne.n	800542a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <TIM_OC3_SetConfig+0xfc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00f      	beq.n	8005452 <TIM_OC3_SetConfig+0xae>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <TIM_OC3_SetConfig+0x100>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_OC3_SetConfig+0xae>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a1a      	ldr	r2, [pc, #104]	@ (80054a8 <TIM_OC3_SetConfig+0x104>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <TIM_OC3_SetConfig+0xae>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <TIM_OC3_SetConfig+0x108>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_OC3_SetConfig+0xae>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <TIM_OC3_SetConfig+0x10c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d113      	bne.n	800547a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	621a      	str	r2, [r3, #32]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <TIM_OC4_SetConfig+0xc0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00f      	beq.n	8005538 <TIM_OC4_SetConfig+0x84>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <TIM_OC4_SetConfig+0xc4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00b      	beq.n	8005538 <TIM_OC4_SetConfig+0x84>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a16      	ldr	r2, [pc, #88]	@ (800557c <TIM_OC4_SetConfig+0xc8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_OC4_SetConfig+0x84>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a15      	ldr	r2, [pc, #84]	@ (8005580 <TIM_OC4_SetConfig+0xcc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_OC4_SetConfig+0x84>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a14      	ldr	r2, [pc, #80]	@ (8005584 <TIM_OC4_SetConfig+0xd0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800553e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800

08005588 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a17      	ldr	r2, [pc, #92]	@ (800563c <TIM_OC5_SetConfig+0xb4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00f      	beq.n	8005602 <TIM_OC5_SetConfig+0x7a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <TIM_OC5_SetConfig+0xb8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00b      	beq.n	8005602 <TIM_OC5_SetConfig+0x7a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a15      	ldr	r2, [pc, #84]	@ (8005644 <TIM_OC5_SetConfig+0xbc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_OC5_SetConfig+0x7a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a14      	ldr	r2, [pc, #80]	@ (8005648 <TIM_OC5_SetConfig+0xc0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC5_SetConfig+0x7a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a13      	ldr	r2, [pc, #76]	@ (800564c <TIM_OC5_SetConfig+0xc4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d109      	bne.n	8005616 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	621a      	str	r2, [r3, #32]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	051b      	lsls	r3, r3, #20
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a18      	ldr	r2, [pc, #96]	@ (8005708 <TIM_OC6_SetConfig+0xb8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00f      	beq.n	80056cc <TIM_OC6_SetConfig+0x7c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a17      	ldr	r2, [pc, #92]	@ (800570c <TIM_OC6_SetConfig+0xbc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_OC6_SetConfig+0x7c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a16      	ldr	r2, [pc, #88]	@ (8005710 <TIM_OC6_SetConfig+0xc0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_OC6_SetConfig+0x7c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <TIM_OC6_SetConfig+0xc4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC6_SetConfig+0x7c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a14      	ldr	r2, [pc, #80]	@ (8005718 <TIM_OC6_SetConfig+0xc8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800

0800571c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2201      	movs	r2, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	43db      	mvns	r3, r3
 800573e:	401a      	ands	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e068      	b.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2d      	ldr	r2, [pc, #180]	@ (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d108      	bne.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01d      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f2:	d018      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a18      	ldr	r2, [pc, #96]	@ (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a14      	ldr	r2, [pc, #80]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10c      	bne.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800582c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40014000 	.word	0x40014000

08005878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005890:	2302      	movs	r3, #2
 8005892:	e073      	b.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d11c      	bne.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	051b      	lsls	r3, r3, #20
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40013400 	.word	0x40013400

08005990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e042      	b.n	8005a28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb ff43 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	@ 0x24
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fb28 	bl	8006030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f825 	bl	8005a30 <UART_SetConfig>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e01b      	b.n	8005a28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fba7 	bl	8006174 <UART_CheckIdleState>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a34:	b08c      	sub	sp, #48	@ 0x30
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4baa      	ldr	r3, [pc, #680]	@ (8005d08 <UART_SetConfig+0x2d8>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a9f      	ldr	r2, [pc, #636]	@ (8005d0c <UART_SetConfig+0x2dc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005aa6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	f023 010f 	bic.w	r1, r3, #15
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a90      	ldr	r2, [pc, #576]	@ (8005d10 <UART_SetConfig+0x2e0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d125      	bne.n	8005b20 <UART_SetConfig+0xf0>
 8005ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8005d14 <UART_SetConfig+0x2e4>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d81a      	bhi.n	8005b18 <UART_SetConfig+0xe8>
 8005ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <UART_SetConfig+0xb8>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005b09 	.word	0x08005b09
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b11 	.word	0x08005b11
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afe:	e116      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b00:	2302      	movs	r3, #2
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b06:	e112      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0e:	e10e      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b10:	2308      	movs	r3, #8
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b16:	e10a      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	e106      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a7c      	ldr	r2, [pc, #496]	@ (8005d18 <UART_SetConfig+0x2e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d138      	bne.n	8005b9c <UART_SetConfig+0x16c>
 8005b2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d14 <UART_SetConfig+0x2e4>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	d82d      	bhi.n	8005b94 <UART_SetConfig+0x164>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x110>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005b95 	.word	0x08005b95
 8005b48:	08005b95 	.word	0x08005b95
 8005b4c:	08005b95 	.word	0x08005b95
 8005b50:	08005b85 	.word	0x08005b85
 8005b54:	08005b95 	.word	0x08005b95
 8005b58:	08005b95 	.word	0x08005b95
 8005b5c:	08005b95 	.word	0x08005b95
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	08005b95 	.word	0x08005b95
 8005b70:	08005b8d 	.word	0x08005b8d
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	e0d8      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b82:	e0d4      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8a:	e0d0      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b92:	e0cc      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b9a:	e0c8      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d1c <UART_SetConfig+0x2ec>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d125      	bne.n	8005bf2 <UART_SetConfig+0x1c2>
 8005ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8005d14 <UART_SetConfig+0x2e4>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bb0:	2b30      	cmp	r3, #48	@ 0x30
 8005bb2:	d016      	beq.n	8005be2 <UART_SetConfig+0x1b2>
 8005bb4:	2b30      	cmp	r3, #48	@ 0x30
 8005bb6:	d818      	bhi.n	8005bea <UART_SetConfig+0x1ba>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d00a      	beq.n	8005bd2 <UART_SetConfig+0x1a2>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d814      	bhi.n	8005bea <UART_SetConfig+0x1ba>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <UART_SetConfig+0x19a>
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d008      	beq.n	8005bda <UART_SetConfig+0x1aa>
 8005bc8:	e00f      	b.n	8005bea <UART_SetConfig+0x1ba>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd0:	e0ad      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd8:	e0a9      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be0:	e0a5      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005be2:	2308      	movs	r3, #8
 8005be4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be8:	e0a1      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005bea:	2310      	movs	r3, #16
 8005bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf0:	e09d      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8005d20 <UART_SetConfig+0x2f0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d125      	bne.n	8005c48 <UART_SetConfig+0x218>
 8005bfc:	4b45      	ldr	r3, [pc, #276]	@ (8005d14 <UART_SetConfig+0x2e4>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c08:	d016      	beq.n	8005c38 <UART_SetConfig+0x208>
 8005c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c0c:	d818      	bhi.n	8005c40 <UART_SetConfig+0x210>
 8005c0e:	2b80      	cmp	r3, #128	@ 0x80
 8005c10:	d00a      	beq.n	8005c28 <UART_SetConfig+0x1f8>
 8005c12:	2b80      	cmp	r3, #128	@ 0x80
 8005c14:	d814      	bhi.n	8005c40 <UART_SetConfig+0x210>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <UART_SetConfig+0x1f0>
 8005c1a:	2b40      	cmp	r3, #64	@ 0x40
 8005c1c:	d008      	beq.n	8005c30 <UART_SetConfig+0x200>
 8005c1e:	e00f      	b.n	8005c40 <UART_SetConfig+0x210>
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c26:	e082      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2e:	e07e      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c36:	e07a      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3e:	e076      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c46:	e072      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a35      	ldr	r2, [pc, #212]	@ (8005d24 <UART_SetConfig+0x2f4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d12a      	bne.n	8005ca8 <UART_SetConfig+0x278>
 8005c52:	4b30      	ldr	r3, [pc, #192]	@ (8005d14 <UART_SetConfig+0x2e4>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c60:	d01a      	beq.n	8005c98 <UART_SetConfig+0x268>
 8005c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c66:	d81b      	bhi.n	8005ca0 <UART_SetConfig+0x270>
 8005c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c6c:	d00c      	beq.n	8005c88 <UART_SetConfig+0x258>
 8005c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c72:	d815      	bhi.n	8005ca0 <UART_SetConfig+0x270>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <UART_SetConfig+0x250>
 8005c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c7c:	d008      	beq.n	8005c90 <UART_SetConfig+0x260>
 8005c7e:	e00f      	b.n	8005ca0 <UART_SetConfig+0x270>
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c86:	e052      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8e:	e04e      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c96:	e04a      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9e:	e046      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca6:	e042      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <UART_SetConfig+0x2dc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d13a      	bne.n	8005d28 <UART_SetConfig+0x2f8>
 8005cb2:	4b18      	ldr	r3, [pc, #96]	@ (8005d14 <UART_SetConfig+0x2e4>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cc0:	d01a      	beq.n	8005cf8 <UART_SetConfig+0x2c8>
 8005cc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cc6:	d81b      	bhi.n	8005d00 <UART_SetConfig+0x2d0>
 8005cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ccc:	d00c      	beq.n	8005ce8 <UART_SetConfig+0x2b8>
 8005cce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd2:	d815      	bhi.n	8005d00 <UART_SetConfig+0x2d0>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <UART_SetConfig+0x2b0>
 8005cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cdc:	d008      	beq.n	8005cf0 <UART_SetConfig+0x2c0>
 8005cde:	e00f      	b.n	8005d00 <UART_SetConfig+0x2d0>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	e022      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e01e      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	e01a      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	e016      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005d00:	2310      	movs	r3, #16
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x2fe>
 8005d08:	cfff69f3 	.word	0xcfff69f3
 8005d0c:	40008000 	.word	0x40008000
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40004400 	.word	0x40004400
 8005d1c:	40004800 	.word	0x40004800
 8005d20:	40004c00 	.word	0x40004c00
 8005d24:	40005000 	.word	0x40005000
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4ab0      	ldr	r2, [pc, #704]	@ (8005ff4 <UART_SetConfig+0x5c4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	f040 809b 	bne.w	8005e70 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d827      	bhi.n	8005d92 <UART_SetConfig+0x362>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0x318>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d75 	.word	0x08005d75
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	08005d93 	.word	0x08005d93
 8005d58:	08005d83 	.word	0x08005d83
 8005d5c:	08005d93 	.word	0x08005d93
 8005d60:	08005d93 	.word	0x08005d93
 8005d64:	08005d93 	.word	0x08005d93
 8005d68:	08005d8b 	.word	0x08005d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7fd fd9c 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d72:	e014      	b.n	8005d9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d74:	f7fd fdac 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8005d78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d7a:	e010      	b.n	8005d9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d7c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ff8 <UART_SetConfig+0x5c8>)
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d80:	e00d      	b.n	8005d9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d82:	f7fd fce1 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8005d86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d88:	e009      	b.n	8005d9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d90:	e005      	b.n	8005d9e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8130 	beq.w	8006006 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	4a94      	ldr	r2, [pc, #592]	@ (8005ffc <UART_SetConfig+0x5cc>)
 8005dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db0:	461a      	mov	r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d305      	bcc.n	8005dd6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d903      	bls.n	8005dde <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ddc:	e113      	b.n	8006006 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	2200      	movs	r2, #0
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	60fa      	str	r2, [r7, #12]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dea:	4a84      	ldr	r2, [pc, #528]	@ (8005ffc <UART_SetConfig+0x5cc>)
 8005dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2200      	movs	r2, #0
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e00:	f7fa fa18 	bl	8000234 <__aeabi_uldivmod>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	020b      	lsls	r3, r1, #8
 8005e16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e1a:	0202      	lsls	r2, r0, #8
 8005e1c:	6979      	ldr	r1, [r7, #20]
 8005e1e:	6849      	ldr	r1, [r1, #4]
 8005e20:	0849      	lsrs	r1, r1, #1
 8005e22:	2000      	movs	r0, #0
 8005e24:	460c      	mov	r4, r1
 8005e26:	4605      	mov	r5, r0
 8005e28:	eb12 0804 	adds.w	r8, r2, r4
 8005e2c:	eb43 0905 	adc.w	r9, r3, r5
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	469a      	mov	sl, r3
 8005e38:	4693      	mov	fp, r2
 8005e3a:	4652      	mov	r2, sl
 8005e3c:	465b      	mov	r3, fp
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4649      	mov	r1, r9
 8005e42:	f7fa f9f7 	bl	8000234 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e54:	d308      	bcc.n	8005e68 <UART_SetConfig+0x438>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e5c:	d204      	bcs.n	8005e68 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e0ce      	b.n	8006006 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e6e:	e0ca      	b.n	8006006 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e78:	d166      	bne.n	8005f48 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d827      	bhi.n	8005ed2 <UART_SetConfig+0x4a2>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x458>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005eb5 	.word	0x08005eb5
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005ed3 	.word	0x08005ed3
 8005e98:	08005ec3 	.word	0x08005ec3
 8005e9c:	08005ed3 	.word	0x08005ed3
 8005ea0:	08005ed3 	.word	0x08005ed3
 8005ea4:	08005ed3 	.word	0x08005ed3
 8005ea8:	08005ecb 	.word	0x08005ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eac:	f7fd fcfc 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eb2:	e014      	b.n	8005ede <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb4:	f7fd fd0c 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8005eb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eba:	e010      	b.n	8005ede <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff8 <UART_SetConfig+0x5c8>)
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ec0:	e00d      	b.n	8005ede <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ec2:	f7fd fc41 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8005ec6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec8:	e009      	b.n	8005ede <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed0:	e005      	b.n	8005ede <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8090 	beq.w	8006006 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	4a44      	ldr	r2, [pc, #272]	@ (8005ffc <UART_SetConfig+0x5cc>)
 8005eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef8:	005a      	lsls	r2, r3, #1
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	441a      	add	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	d916      	bls.n	8005f40 <UART_SetConfig+0x510>
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f18:	d212      	bcs.n	8005f40 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f023 030f 	bic.w	r3, r3, #15
 8005f22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	8bfb      	ldrh	r3, [r7, #30]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	8bfa      	ldrh	r2, [r7, #30]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	e062      	b.n	8006006 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f46:	e05e      	b.n	8006006 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d828      	bhi.n	8005fa2 <UART_SetConfig+0x572>
 8005f50:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x528>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f93 	.word	0x08005f93
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005fa3 	.word	0x08005fa3
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fd fc94 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8005f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f82:	e014      	b.n	8005fae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f84:	f7fd fca4 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff8 <UART_SetConfig+0x5c8>)
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fd fbd9 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8005f96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fa0:	e005      	b.n	8005fae <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fac:	bf00      	nop
    }

    if (pclk != 0U)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d028      	beq.n	8006006 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	4a10      	ldr	r2, [pc, #64]	@ (8005ffc <UART_SetConfig+0x5cc>)
 8005fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	441a      	add	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d910      	bls.n	8006000 <UART_SetConfig+0x5d0>
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe4:	d20c      	bcs.n	8006000 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0x5d6>
 8005ff2:	bf00      	nop
 8005ff4:	40008000 	.word	0x40008000
 8005ff8:	00f42400 	.word	0x00f42400
 8005ffc:	08006c08 	.word	0x08006c08
      }
      else
      {
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2201      	movs	r2, #1
 800600a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2201      	movs	r2, #1
 8006012:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006022:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006026:	4618      	mov	r0, r3
 8006028:	3730      	adds	r7, #48	@ 0x30
 800602a:	46bd      	mov	sp, r7
 800602c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01a      	beq.n	8006146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800612e:	d10a      	bne.n	8006146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b098      	sub	sp, #96	@ 0x60
 8006178:	af02      	add	r7, sp, #8
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006184:	f7fb fdaa 	bl	8001cdc <HAL_GetTick>
 8006188:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d12f      	bne.n	80061f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a0:	2200      	movs	r2, #0
 80061a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f88e 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d022      	beq.n	80061f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e063      	b.n	80062c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b04      	cmp	r3, #4
 8006204:	d149      	bne.n	800629a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006206:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620e:	2200      	movs	r2, #0
 8006210:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f857 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d03c      	beq.n	800629a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	623b      	str	r3, [r7, #32]
   return(result);
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006240:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e6      	bne.n	8006220 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	60fb      	str	r3, [r7, #12]
   return(result);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006272:	61fa      	str	r2, [r7, #28]
 8006274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	617b      	str	r3, [r7, #20]
   return(result);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e5      	bne.n	8006252 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e012      	b.n	80062c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3758      	adds	r7, #88	@ 0x58
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d8:	e04f      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062e0:	d04b      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e2:	f7fb fcfb 	bl	8001cdc <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e04e      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d037      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xb2>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b80      	cmp	r3, #128	@ 0x80
 800630e:	d034      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b40      	cmp	r3, #64	@ 0x40
 8006314:	d031      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d110      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2208      	movs	r2, #8
 800632a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f838 	bl	80063a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2208      	movs	r2, #8
 8006336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e029      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006354:	d111      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800635e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f81e 	bl	80063a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e00f      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4013      	ands	r3, r2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	429a      	cmp	r2, r3
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	429a      	cmp	r2, r3
 8006396:	d0a0      	beq.n	80062da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b095      	sub	sp, #84	@ 0x54
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e6      	bne.n	80063aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e3      	bne.n	80063dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d118      	bne.n	800644e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	60bb      	str	r3, [r7, #8]
   return(result);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f023 0310 	bic.w	r3, r3, #16
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6979      	ldr	r1, [r7, #20]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	613b      	str	r3, [r7, #16]
   return(result);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e6      	bne.n	800641c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006462:	bf00      	nop
 8006464:	3754      	adds	r7, #84	@ 0x54
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_UARTEx_DisableFifoMode+0x16>
 8006480:	2302      	movs	r3, #2
 8006482:	e027      	b.n	80064d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	@ 0x24
 8006490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e02d      	b.n	8006554 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	@ 0x24
 8006504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f84f 	bl	80065d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006570:	2302      	movs	r3, #2
 8006572:	e02d      	b.n	80065d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2224      	movs	r2, #36	@ 0x24
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f811 	bl	80065d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d108      	bne.n	80065fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065f8:	e031      	b.n	800665e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065fa:	2308      	movs	r3, #8
 80065fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065fe:	2308      	movs	r3, #8
 8006600:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	0e5b      	lsrs	r3, r3, #25
 800660a:	b2db      	uxtb	r3, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	0f5b      	lsrs	r3, r3, #29
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	7b3a      	ldrb	r2, [r7, #12]
 8006626:	4911      	ldr	r1, [pc, #68]	@ (800666c <UARTEx_SetNbDataToProcess+0x94>)
 8006628:	5c8a      	ldrb	r2, [r1, r2]
 800662a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800662e:	7b3a      	ldrb	r2, [r7, #12]
 8006630:	490f      	ldr	r1, [pc, #60]	@ (8006670 <UARTEx_SetNbDataToProcess+0x98>)
 8006632:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006634:	fb93 f3f2 	sdiv	r3, r3, r2
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	7b7a      	ldrb	r2, [r7, #13]
 8006644:	4909      	ldr	r1, [pc, #36]	@ (800666c <UARTEx_SetNbDataToProcess+0x94>)
 8006646:	5c8a      	ldrb	r2, [r1, r2]
 8006648:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800664c:	7b7a      	ldrb	r2, [r7, #13]
 800664e:	4908      	ldr	r1, [pc, #32]	@ (8006670 <UARTEx_SetNbDataToProcess+0x98>)
 8006650:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006652:	fb93 f3f2 	sdiv	r3, r3, r2
 8006656:	b29a      	uxth	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	08006c20 	.word	0x08006c20
 8006670:	08006c28 	.word	0x08006c28

08006674 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80066ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80066d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80066da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <SDMMC_SendCommand+0x50>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	fffee0c0 	.word	0xfffee0c0

08006704 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3314      	adds	r3, #20
 800672c:	461a      	mov	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	4413      	add	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006750:	230c      	movs	r3, #12
 8006752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800675e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006762:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800677c:	f107 0308 	add.w	r3, r7, #8
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ff94 	bl	80066b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006788:	4a0b      	ldr	r2, [pc, #44]	@ (80067b8 <SDMMC_CmdStopTransfer+0x74>)
 800678a:	210c      	movs	r1, #12
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f815 	bl	80067bc <SDMMC_GetCmdResp1>
 8006792:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067a6:	d101      	bne.n	80067ac <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80067ac:	69fb      	ldr	r3, [r7, #28]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	05f5e100 	.word	0x05f5e100

080067bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	460b      	mov	r3, r1
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80067ca:	4b70      	ldr	r3, [pc, #448]	@ (800698c <SDMMC_GetCmdResp1+0x1d0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a70      	ldr	r2, [pc, #448]	@ (8006990 <SDMMC_GetCmdResp1+0x1d4>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	0a5a      	lsrs	r2, r3, #9
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	1e5a      	subs	r2, r3, #1
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067ec:	e0c9      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4b67      	ldr	r3, [pc, #412]	@ (8006994 <SDMMC_GetCmdResp1+0x1d8>)
 80067f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0ef      	beq.n	80067de <SDMMC_GetCmdResp1+0x22>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ea      	bne.n	80067de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2204      	movs	r2, #4
 8006818:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800681a:	2304      	movs	r3, #4
 800681c:	e0b1      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006830:	2301      	movs	r3, #1
 8006832:	e0a6      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a58      	ldr	r2, [pc, #352]	@ (8006998 <SDMMC_GetCmdResp1+0x1dc>)
 8006838:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff ff62 	bl	8006704 <SDMMC_GetCommandResponse>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	4293      	cmp	r3, r2
 8006848:	d001      	beq.n	800684e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800684a:	2301      	movs	r3, #1
 800684c:	e099      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800684e:	2100      	movs	r1, #0
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff ff64 	bl	800671e <SDMMC_GetResponse>
 8006856:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4b50      	ldr	r3, [pc, #320]	@ (800699c <SDMMC_GetCmdResp1+0x1e0>)
 800685c:	4013      	ands	r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006862:	2300      	movs	r3, #0
 8006864:	e08d      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	da02      	bge.n	8006872 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800686c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006870:	e087      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800687c:	2340      	movs	r3, #64	@ 0x40
 800687e:	e080      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800688a:	2380      	movs	r3, #128	@ 0x80
 800688c:	e079      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800689c:	e071      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80068a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068ac:	e069      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80068b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068bc:	e061      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80068c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068cc:	e059      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80068d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068dc:	e051      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80068e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80068ec:	e049      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80068f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80068fc:	e041      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690c:	e039      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800691c:	e031      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006928:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800692c:	e029      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006938:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800693c:	e021      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006948:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800694c:	e019      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006958:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800695c:	e011      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006968:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800696c:	e009      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006978:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800697c:	e001      	b.n	8006982 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800697e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000000 	.word	0x20000000
 8006990:	10624dd3 	.word	0x10624dd3
 8006994:	00200045 	.word	0x00200045
 8006998:	002000c5 	.word	0x002000c5
 800699c:	fdffe008 	.word	0xfdffe008

080069a0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80069a4:	4907      	ldr	r1, [pc, #28]	@ (80069c4 <MX_FATFS_Init+0x24>)
 80069a6:	4808      	ldr	r0, [pc, #32]	@ (80069c8 <MX_FATFS_Init+0x28>)
 80069a8:	f000 f8ba 	bl	8006b20 <FATFS_LinkDriver>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069b6:	e003      	b.n	80069c0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80069b8:	4b04      	ldr	r3, [pc, #16]	@ (80069cc <MX_FATFS_Init+0x2c>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80069be:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000650 	.word	0x20000650
 80069c8:	08006c30 	.word	0x08006c30
 80069cc:	20000654 	.word	0x20000654

080069d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_initialize */
  Stat = STA_NOINIT;
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <SD_initialize+0x24>)
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]

  /* Place for user code (may require BSP functions/defines to be added to the project) */

  return Stat;
 80069e0:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <SD_initialize+0x24>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b2db      	uxtb	r3, r3
  /* USER CODE END SD_initialize */
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000009 	.word	0x20000009

080069f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_status */
  Stat = STA_NOINIT;
 8006a02:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <SD_status+0x24>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]

  /* Place for user code (may require BSP functions/defines to be added to the project) */

  return Stat;
 8006a08:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <SD_status+0x24>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
  /* USER CODE END SD_status */
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000009 	.word	0x20000009

08006a20 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_read */
  DRESULT res = RES_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]

  /* Place for user code (may require BSP functions/defines to be added to the project) */

  return res;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END SD_read */
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_write */
  DRESULT res = RES_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	75fb      	strb	r3, [r7, #23]

  /* Place for user code (may require BSP functions/defines to be added to the project) */

  return res;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]

  /* USER CODE END SD_write */
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	603a      	str	r2, [r7, #0]
 8006a6e:	71fb      	strb	r3, [r7, #7]
 8006a70:	460b      	mov	r3, r1
 8006a72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN SD_ioctl */
  DRESULT res = RES_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]

  /* Place for user code (may require BSP functions/defines to be added to the project) */
  return res;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]

  /* USER CODE END SD_ioctl */
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006aa0:	7a5b      	ldrb	r3, [r3, #9]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d131      	bne.n	8006b0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006aaa:	7a5b      	ldrb	r3, [r3, #9]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006ab6:	4b19      	ldr	r3, [pc, #100]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006ab8:	7a5b      	ldrb	r3, [r3, #9]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4a17      	ldr	r2, [pc, #92]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006ac6:	4b15      	ldr	r3, [pc, #84]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006ac8:	7a5b      	ldrb	r3, [r3, #9]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b13      	ldr	r3, [pc, #76]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006ad0:	4413      	add	r3, r2
 8006ad2:	79fa      	ldrb	r2, [r7, #7]
 8006ad4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006ad6:	4b11      	ldr	r3, [pc, #68]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006ad8:	7a5b      	ldrb	r3, [r3, #9]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	b2d1      	uxtb	r1, r2
 8006ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <FATFS_LinkDriverEx+0x94>)
 8006ae2:	7251      	strb	r1, [r2, #9]
 8006ae4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006ae6:	7dbb      	ldrb	r3, [r7, #22]
 8006ae8:	3330      	adds	r3, #48	@ 0x30
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	3301      	adds	r3, #1
 8006af4:	223a      	movs	r2, #58	@ 0x3a
 8006af6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3302      	adds	r3, #2
 8006afc:	222f      	movs	r2, #47	@ 0x2f
 8006afe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	3303      	adds	r3, #3
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000658 	.word	0x20000658

08006b20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ffaa 	bl	8006a88 <FATFS_LinkDriverEx>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <memset>:
 8006b3e:	4402      	add	r2, r0
 8006b40:	4603      	mov	r3, r0
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d100      	bne.n	8006b48 <memset+0xa>
 8006b46:	4770      	bx	lr
 8006b48:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4c:	e7f9      	b.n	8006b42 <memset+0x4>
	...

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4d0d      	ldr	r5, [pc, #52]	@ (8006b88 <__libc_init_array+0x38>)
 8006b54:	2600      	movs	r6, #0
 8006b56:	4c0d      	ldr	r4, [pc, #52]	@ (8006b8c <__libc_init_array+0x3c>)
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	42a6      	cmp	r6, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	4d0b      	ldr	r5, [pc, #44]	@ (8006b90 <__libc_init_array+0x40>)
 8006b62:	2600      	movs	r6, #0
 8006b64:	4c0b      	ldr	r4, [pc, #44]	@ (8006b94 <__libc_init_array+0x44>)
 8006b66:	f000 f817 	bl	8006b98 <_init>
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b78:	3601      	adds	r6, #1
 8006b7a:	4798      	blx	r3
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b82:	3601      	adds	r6, #1
 8006b84:	4798      	blx	r3
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	08006c4c 	.word	0x08006c4c
 8006b8c:	08006c4c 	.word	0x08006c4c
 8006b90:	08006c4c 	.word	0x08006c4c
 8006b94:	08006c50 	.word	0x08006c50

08006b98 <_init>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr

08006ba4 <_fini>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr
